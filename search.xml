<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>打印日历的C语言实现</title>
    <url>/2021/03/10/calendar/</url>
    <content><![CDATA[<h2 id="打印日历的C语言实现"><a href="#打印日历的C语言实现" class="headerlink" title="打印日历的C语言实现"></a>打印日历的C语言实现</h2><p>实现nextDate函数，通过调用nextDate函数来打印出2021年的日历</p>
<font color="orange">
int nextDate(int month, int date, int year)
</font>  

<p>要求打印出指定日期的下一天，即给出某年某月某日，需返回下一天是多少号。<br>具体代码如下：</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//***********************************************</span>
<span class="token comment">//*** a program to print the calendar of 2021 ***</span>
<span class="token comment">//***********************************************</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>

<span class="token comment">//this is a function to return the next date of the given day</span>
<span class="token keyword">int</span> <span class="token function">nextDate</span><span class="token punctuation">(</span><span class="token keyword">int</span> month<span class="token punctuation">,</span> <span class="token keyword">int</span> date<span class="token punctuation">,</span> <span class="token keyword">int</span> year<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>

    <span class="token comment">//use two arrays to store the days of leap year and common year</span>
    <span class="token keyword">int</span> leap_days<span class="token punctuation">[</span><span class="token number">13</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">,</span> <span class="token number">29</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">,</span> 
    <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> common_days<span class="token punctuation">[</span><span class="token number">13</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">,</span> 
    <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

    <span class="token comment">//at first, decide wether it is a leap year</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>year <span class="token operator">%</span> <span class="token number">4</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> year <span class="token operator">%</span> <span class="token number">100</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>year <span class="token operator">%</span> <span class="token number">400</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>date <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">></span> leap_days<span class="token punctuation">[</span>month<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token comment">//if month is December, </span>
    <span class="token comment">//it means next day is the first day of new year</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>month <span class="token operator">==</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
                year<span class="token operator">++</span><span class="token punctuation">;</span> month<span class="token operator">++</span><span class="token punctuation">;</span> date <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span><span class="token punctuation">&#123;</span>
                date<span class="token operator">++</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span><span class="token punctuation">&#123;</span>
            date<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>date <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">></span> common_days<span class="token punctuation">[</span>month<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>month <span class="token operator">==</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
                year<span class="token operator">++</span><span class="token punctuation">;</span> month<span class="token operator">++</span><span class="token punctuation">;</span> date <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span><span class="token punctuation">&#123;</span>
                date<span class="token operator">++</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span><span class="token punctuation">&#123;</span>
            date<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> date<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>


<span class="token comment">//this is a function to print the calendar of 2021</span>
<span class="token keyword">void</span> <span class="token function">printCalendar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n***********************************\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"* WELCOME TO THE CALENDAR OF 2021 *\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"***********************************\n\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//the number of each month</span>
    <span class="token keyword">int</span> days<span class="token punctuation">[</span><span class="token number">13</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">,</span> 
    <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  
    <span class="token comment">//pointers of months'name</span>
    <span class="token keyword">char</span><span class="token operator">*</span> months<span class="token punctuation">[</span><span class="token number">13</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"fault"</span><span class="token punctuation">,</span> <span class="token string">"January"</span><span class="token punctuation">,</span> <span class="token string">"February"</span><span class="token punctuation">,</span> 
    <span class="token string">"March"</span><span class="token punctuation">,</span> <span class="token string">"April"</span><span class="token punctuation">,</span> <span class="token string">"May"</span><span class="token punctuation">,</span> <span class="token string">"June"</span><span class="token punctuation">,</span> <span class="token string">"July"</span><span class="token punctuation">,</span> <span class="token string">"August"</span><span class="token punctuation">,</span>
    <span class="token string">"September"</span><span class="token punctuation">,</span> <span class="token string">"October"</span><span class="token punctuation">,</span> <span class="token string">"November"</span><span class="token punctuation">,</span> <span class="token string">"December"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">12</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"***** %s *****\n"</span><span class="token punctuation">,</span> months<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Sun Mon Tue Wed Tus Fri Sat\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">static</span> <span class="token keyword">int</span> blanks <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>   
        <span class="token comment">//a variable to count the number of the blanks </span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> blanks<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"    "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>

        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> days<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            blanks<span class="token operator">++</span><span class="token punctuation">;</span> 

            <span class="token keyword">if</span><span class="token punctuation">(</span>j <span class="token operator">&lt;</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d   "</span><span class="token punctuation">,</span> <span class="token function">nextDate</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> <span class="token number">2021</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
                <span class="token comment">//print blanks to aline</span>
            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span><span class="token punctuation">&#123;</span>
                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d  "</span><span class="token punctuation">,</span> <span class="token function">nextDate</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> <span class="token number">2021</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
            <span class="token comment">//this block is to decide whether to reprint the week</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>blanks <span class="token operator">==</span> <span class="token number">7</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                blanks <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token function">printCalendar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      <categories>
        <category>problems</category>
      </categories>
      <tags>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title>大数据技术下新媒体用户画像与隐私安全</title>
    <url>/2020/11/22/data&amp;privacy/</url>
    <content><![CDATA[<h1 id="大数据技术下新媒体用户画像与隐私安全"><a href="#大数据技术下新媒体用户画像与隐私安全" class="headerlink" title="大数据技术下新媒体用户画像与隐私安全"></a>大数据技术下新媒体用户画像与隐私安全</h1><p>随着大数据时代的到来，各种用途的APP如雨后春笋般出现。例如用于外卖的美团、饿了么；用于社交通讯的QQ、微信；用于拍摄小视频的快手、抖音；用于购物的拼多多、淘宝……与此同时，用户画像的应用也越来越广泛，人们在感叹APP越来越懂用户的同时，也产生了担忧：大数据时代，各类APP在刻画用户画像的同时，用户的隐私安全如何得到保障？</p>
<h2 id="什么是用户画像"><a href="#什么是用户画像" class="headerlink" title="什么是用户画像"></a>什么是用户画像</h2><p><img src="https://pic.rmb.bdstatic.com/bjh/31bd5a3ba1c932bf2101717f2c23be64.png" alt="image.png" srcset="/img/loading.gif" data-src="https://pic.rmb.bdstatic.com/bjh/31bd5a3ba1c932bf2101717f2c23be64.png" class="lozad post-image"><br>简单来说，可以把用户画像理解为给用户贴标签。在新媒体时代，用户使用各种APP和社交媒体必然会遗留痕迹，而大数据就是将这些信息收集起来，然后对用户的年龄、社会属性、消费习惯、生活习惯等各个维度的信息进行分析、统计刻画出用户的画像。</p>
<h2 id="通过用户画像精准推送营销信息"><a href="#通过用户画像精准推送营销信息" class="headerlink" title="通过用户画像精准推送营销信息"></a>通过用户画像精准推送营销信息</h2><p>在大数据算法对不同用户进行了用户画像之后，在得知了用户真正的需求之后，各类 APP 就可以给用户精准提供用户所需商品。   </p>
<p>用户在浏览淘宝时，对于自己喜爱的商品会加购或收藏，这些行为甚至在同一页面停留时间的长短都会成为用户画像构建的数据。当一位女性用户长期搜索婴儿用品时，大数据算法就可以推算出这位用户是一位母亲，并且需要的产品类型是婴儿用品。     </p>
<p>抖音会根据用户观看视频的时长、类型、关注的人等数据对用户进行画像，以此完成个人专属推荐。比如有的用户喜欢看宠物视频，那么他在刷视频的过程中就会刷到很多关于宠物的视频推荐；而有的用户喜欢影视类视频，那这个用户就会被贴上“影视”的标签，所推荐的作品也会偏向于影视。    </p>
<p>在 QQ、微博等社交平台上，用户经常会发现“可能认识的好友”这一标签，平台通过对用户关注、用户评论、用户点赞、共同好友等数据的收集，形成一个巨大的数据池，系统会通过智能推算出用户关系网，形成关系群，给用户的社交关系进行画像，然后进行智能化社交推荐。</p>
<h2 id="用户画像数据获取带来的隐私安全问题"><a href="#用户画像数据获取带来的隐私安全问题" class="headerlink" title="用户画像数据获取带来的隐私安全问题"></a>用户画像数据获取带来的隐私安全问题</h2><p><img src="https://pic.rmb.bdstatic.com/bjh/17eced223431569de9d7a1893835a582.png" alt="image.png" srcset="/img/loading.gif" data-src="https://pic.rmb.bdstatic.com/bjh/17eced223431569de9d7a1893835a582.png" class="lozad post-image"><br>个人对自身信息的保护意识淡薄，是导致个人信息发生泄露重要原因之一。在很多情况下，人们会将自己个人信息共享给别人。比如在包括社交网站和电商购物平台在内的很多服务软件上注册会员时都需提供个人信息，在商家小利的优惠条件下，人们会愿意把自己的信息分享给别人。   </p>
<p>部分商业公司在巨大的利益驱动下，不顾法律红线，开始从事贩卖个人信息的活动。这部分公司已经掌握了数据搜集技术，在未征得当事人许可的情况下就擅自对包含用户个人信息的数据进行搜集。并把这些搜集到的个人信息，进行分析、归类，然后转卖给诈骗团伙、广告运营商、中介公司等团体或个人，从而实现非法获利。    </p>
<p>微信就曾因进行精准的广告投放，而被指控监控用户文字聊天数据，尽管微信已回应所有数据均已脱敏，但是仍然不能消除用户在使用时的担忧。除了腾讯，因为隐私泄露而被质疑的 APP 也不在少数。从阿里飞猪、携程、滴滴等一系列“大数据杀熟”行为，到美团、饿了么的“偷听门”风波，再到Facebook 大量用户信息泄露，这些 APP 似乎都被质疑“窥探用户隐私”。</p>
<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>大数据技术已经到达一个相对成熟的阶段，而作为大数据技术根基的用户画像，不管是对企业的长远发展，还是对用户个性化服务的提供都具有十分重要的意义，但是用户画像在给人们生活带来遍历的同时也带来了隐私安全问题，这是互联网发展必须解决的问题。</p>
<h5 id="参考文献："><a href="#参考文献：" class="headerlink" title="参考文献："></a>参考文献：</h5><p>[1]董莉莉.剖析大数据时代下用户画像及媒介策略[J]传媒,2016（2）：82-83.<br>[2]徐 乐.数据时代隐私安全问题研究[D].成都理工大学，2016.6.<br>[3]贾江洚,梁广洪.大数据时代下计算机网络信息安全问题探讨[J].计算机产品与流通,2019(11):52.</p>
]]></content>
      <categories>
        <category>Idea</category>
      </categories>
  </entry>
  <entry>
    <title>关于Hexo+Gitee博客搭建时遇到的一些问题以及解决方案</title>
    <url>/2020/09/13/hexo_fault/</url>
    <content><![CDATA[<h1 id="关于Hexo-Gitee博客搭建时遇到的一些问题以及解决方案"><a href="#关于Hexo-Gitee博客搭建时遇到的一些问题以及解决方案" class="headerlink" title="关于Hexo+Gitee博客搭建时遇到的一些问题以及解决方案"></a>关于Hexo+Gitee博客搭建时遇到的一些问题以及解决方案</h1><h2 id="localhost重定向次数过多"><a href="#localhost重定向次数过多" class="headerlink" title="localhost重定向次数过多"></a>localhost重定向次数过多</h2><p>对于这个问题，搜过很多方案，例如删除cookies，卸载浏览器重装，删除博客所有内容等，结果都以失败告终。<br>出现这样的情况，可能是因为我每次建博客失败，删除文档重来时，一直使用的新建文件夹名称都是hexo，使用<code>hexo s</code>指令生成静态页面时，使得本地访问出现地址循环定向之类的问题（这只是我个人浅陋的想法，我对网页重定向也没有很深入的了解）。     </p>
<p>我最后解决这个问题的方案是删除hexo文档，之后新建文档命名为blog，在blog目录下重新建立博客，再用<code>hexo s</code>指令生成网页，发现最后没有出现重定向次数过多的问题。    </p>
<p><code>（ps：虽然删档重来的确很难受，我此前已经删档重来了不下十次，所以，这个解决方案对我来说还可以接受）</code></p>
<h2 id="Gitee-Pages部署失败（主题没有样式或使用hexo-d指令无法推送博客内容）"><a href="#Gitee-Pages部署失败（主题没有样式或使用hexo-d指令无法推送博客内容）" class="headerlink" title="Gitee Pages部署失败（主题没有样式或使用hexo d指令无法推送博客内容）"></a>Gitee Pages部署失败（主题没有样式或使用hexo d指令无法推送博客内容）</h2><p>主题没有样式的问题，大概是本地生成网页正常，部署到Gitee Pages上后主题消失，页面回到十年前，简直降维打击的感觉。这个我也搜过许多解决方案，例如<code>改变网站配置文件root的路径，将它改为“root: .”（这是指在当前目录搜索，没有样式的原因可能是网站搜索不到相关文件，打开网站检查可以看见一堆404）。</code>不过，之后我发现，不用更改root也可以直接访问页面。当初样式消失的问题可能是当初我不小心修改了某些文件，如果按照教程来做的话，应该不会碰到相关问题。   </p>
<p>无法推送博客的问题，比较难解释，我之前部署了公钥，总出现问题，后来我直接删除了公钥，结果还是存在问题。大概可以排除公钥的因素，不过，如果你想对仓库进行写入操作，<code>公钥必须是个人公钥才行，否则部署时也会部署不上去。</code>之后，我们来谈谈我是如何解决最终问题的。      </p>
<p>最后我发现，问题出现在仓库名称上—xxx.gitee.io。这样命名的仓库名称是万恶的来源，具体原因和解决方案可以在<a href="https://gitee.com/help/articles/4136#article-header0">Gitee Page</a>原网页找到。具体是pages的二级目录的问题，只要把仓库名的后缀删去即可，这样就没有了相应配置文件的相对路径问题。     </p>
<p><code>（注意，你的仓库名必须为你Gitee上的昵称。）</code></p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
  </entry>
  <entry>
    <title>使用DFS枚举格雷码</title>
    <url>/2021/03/23/dfs&amp;gray/</url>
    <content><![CDATA[<h2 id="使用DFS枚举格雷码"><a href="#使用DFS枚举格雷码" class="headerlink" title="使用DFS枚举格雷码"></a>使用DFS枚举格雷码</h2><p><font color="red">问题</font>：给定正整数$n$，需要输出$2^n$个$n$位01串，且相邻01串之间只允许有一位不相同。<br>$n=2$时的结果：00，01，11，10<br>$n=3$时的结果：000，001，011，010，110，111，101，100    </p>
<p><font color="red">思路</font>：由题目描述，可以联想到格雷码，相邻字符串只有1位不同。等长01串，使用二叉树结构储存，通过特定的排列，使得根节点到叶子节点的路径上刚好是所需要的01串,最后通过对二叉树遍历，输出所有可能的结果。每次遍历都需要从根节点到叶子节点，同时记录路径上的01值，可以使用DFS(深度优先搜索)进行遍历。</p>
<p><font color="red">算法</font>:<br><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token comment">/*input函数用来控制输入信息，防止输入违法数值*/</span>
<span class="token keyword">int</span> <span class="token function">input</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">*</span>n <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"illegal input!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span> 
    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">/*创建储存特定序列的满二叉树*/</span>
<span class="token keyword">void</span> <span class="token function">tree_create</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> size<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>size <span class="token operator">>=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>size <span class="token operator">>=</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        a<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token comment">/*当树的层数大于等于3时，树的左右节点呈对称排列*/</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>i<span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">4</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>i<span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">4</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>i<span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">4</span> <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>i<span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">4</span> <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">/*打印大小为size的数组到屏幕上*/</span>
<span class="token keyword">int</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> size<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">/*使用DFS算法，对二叉树进行遍历，并用path数组记录路径*/</span>
<span class="token keyword">void</span> <span class="token function">gray_create</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> cur_place<span class="token punctuation">,</span> <span class="token keyword">int</span> cur_len<span class="token punctuation">,</span> <span class="token keyword">int</span> len<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span> path<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    path<span class="token punctuation">[</span>cur_len<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>cur_place<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>cur_len <span class="token operator">==</span> len<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">/*当现处的层数等于树叶所在的层数时，输出01串*/</span>
        <span class="token function">print</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> len<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token function">gray_create</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token punctuation">(</span>cur_place<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> cur_len<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> len<span class="token punctuation">,</span> path<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">gray_create</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token punctuation">(</span>cur_place<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">,</span> cur_len<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> len<span class="token punctuation">,</span> path<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">/*创建01串 */</span>
<span class="token keyword">void</span> <span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">input</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token operator">*</span>n<span class="token punctuation">;</span>
        <span class="token keyword">int</span> size <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token operator">*</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> a<span class="token punctuation">[</span>size<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> path<span class="token punctuation">[</span>len<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

        <span class="token function">tree_create</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">gray_create</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">,</span> path<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>


<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> n<span class="token punctuation">;</span>
    <span class="token function">create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>
<p><font color="red">结果</font>：</p>
<p><img src="https://pic.rmb.bdstatic.com/bjh/d81012d5b3a1410aa29632ef960dee3d.png" alt="image.png" srcset="/img/loading.gif" data-src="https://pic.rmb.bdstatic.com/bjh/d81012d5b3a1410aa29632ef960dee3d.png" class="lozad post-image"></p>
]]></content>
      <categories>
        <category>problems</category>
      </categories>
      <tags>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title>互联网时代的热点领域与营销方法</title>
    <url>/2021/01/06/net&amp;sale&amp;methods/</url>
    <content><![CDATA[<h1 id="热点领域"><a href="#热点领域" class="headerlink" title="热点领域"></a>热点领域</h1><h2 id="5G"><a href="#5G" class="headerlink" title="5G"></a>5G</h2><p><img src="https://ss0.bdstatic.com/70cFvHSh_Q1YnxGkpoWK1HF6hhy/it/u=1012801975,905508611&amp;fm=26&amp;gp=0.jpg" alt srcset="/img/loading.gif" data-src="https://ss0.bdstatic.com/70cFvHSh_Q1YnxGkpoWK1HF6hhy/it/u=1012801975,905508611&amp;fm=26&amp;gp=0.jpg" class="lozad post-image"><br><a href="https://bk.tw.lvfukeji.com/wiki/5G#%E6%8A%80%E8%A1%93%E5%89%B5%E6%96%B0">5G</a> 第五代移动通信技术（英语：5th generation mobile networks或5th generation wireless systems，简称5G）是最新一代移动通信技术，为4G（LTE-A、WiMAX-A）系统后的延伸。</p>
<p>5G与4G相比，具有“更高网速、低延时高可靠、低功率海量连接”的特点。</p>
<p>在超高速率方面，5G速率最高可以达到4G的100倍，实现10Gb/秒的峰值速率，能够用手机很流畅地看4K、8K高清视频，急速畅玩360度全景VR游戏等等。</p>
<p>在超低时延方面，5G的空口时延可以低到1毫秒，仅相当于4G的十分之一，远高于人体的应激反应，可以广泛地应用于自动控制领域。</p>
<p>在超大连接方面，5G每平方公里可以有100万的连接数，与4G相比用户容量可以大大增加，除了手机终端的连接之外，还可以广泛地应用于物联网。<a href="https://zhuanlan.zhihu.com/p/60587008?utm_source=wechat_session">[1]</a></p>
<p>5G时代，华为在技术和产品等多个维度实现全面领先，5G商用合同订单居首位且超半数位于欧洲市场。全球ICT行业权威咨询公司GlobalData发布的《5G接入网（RAN）竞争力分析报告》指出：前五大设备商中，华为在5GRAN（无线接入网）竞争力综合排名中位列第一，而其他设备商各有优劣，并列处于第二梯队。华为在基带容量、射频产品组合、部署简易度及技术演进能力这四个运营商看重的关键维度中均保持第一。</p>
<h2 id="云计算"><a href="#云计算" class="headerlink" title="云计算"></a>云计算</h2><p><img src="https://pic1.zhimg.com/80/v2-08489d1ae5a6db47efbeabcea1962ac9_720w.jpg?source=1940ef5c" alt srcset="/img/loading.gif" data-src="https://pic1.zhimg.com/80/v2-08489d1ae5a6db47efbeabcea1962ac9_720w.jpg?source=1940ef5c" class="lozad post-image"><br><a href="https://bk.tw.lvfukeji.com/baike-%E9%9B%B2%E7%AB%AF%E9%81%8B%E7%AE%97">云计算</a>（英语：cloud computing），也被意译为网络计算，是一种基于互联网的计算方式，通过这种方式，共享的软硬件资源和信息可以按需求提供给计算机各种终端和其他设备，使用服务商提供的电脑基建作计算和资源。</p>
<p>“云”一般具有相当的规模，一些知名的云供应商如Google云计算、Amazon、IBM、微软、阿里等也都拥能拥有上百万级的服务器规模。而依靠这些分布式的服务器所构建起来的“云”能够为使用者提供前所未有的计算能力。</p>
<p>网络安全已经成为所有企业或个人创业者必须面对的问题，企业的IT团队或个人很难应对那些来自网络的恶意攻击，而使用云服务则可以借助更专业的安全团队来有效降低安全风险。</p>
<h2 id="人工智能AI"><a href="#人工智能AI" class="headerlink" title="人工智能AI"></a>人工智能AI</h2><p><img src="https://ss3.bdstatic.com/70cFv8Sh_Q1YnxGkpoWK1HF6hhy/it/u=1695025592,1319555803&amp;fm=26&amp;gp=0.jpg" alt srcset="/img/loading.gif" data-src="https://ss3.bdstatic.com/70cFv8Sh_Q1YnxGkpoWK1HF6hhy/it/u=1695025592,1319555803&amp;fm=26&amp;gp=0.jpg" class="lozad post-image"><br><a href="https://bk.tw.lvfukeji.com/wiki/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD">人工智能</a>（英语：artificial intelligence，缩写为AI）亦称智械、机器智能，指由人制造出来的机器所表现出来的智能。通常人工智能是指通过普通计算机程序来呈现人类智能的技术。</p>
<p>人工智能历经三次发展浪潮：萌芽期、推理期，突破期、知识期，飞速发展期、机器学习期。目前，深度学习语音、图像识别领域大获成功。人工智能的迅速发展将深刻改变人类社会和世界的面貌，当前，不少国家已将人工智能上升为国家重大发展战略。</p>
<p>近年来中国人工智能产业发展迅速。从市场规模来看，自2015年开始，中国人工智能市场规模逐年攀升。截至2017年中国人工智能市场规模已达到了217亿元，同比增长52.8%。据预测，到2020年，中国在人工智能的市场规模将达到710亿元。2015到2020年间复合年均增长率为44.5%。<a href="https://www.bilibili.com/read/cv6709719">[3]</a></p>
<h2 id="物联网"><a href="#物联网" class="headerlink" title="物联网"></a>物联网</h2><p><img src="https://ss1.bdstatic.com/70cFuXSh_Q1YnxGkpoWK1HF6hhy/it/u=1609532872,1801895935&amp;fm=26&amp;gp=0.jpg" alt srcset="/img/loading.gif" data-src="https://ss1.bdstatic.com/70cFuXSh_Q1YnxGkpoWK1HF6hhy/it/u=1609532872,1801895935&amp;fm=26&amp;gp=0.jpg" class="lozad post-image"><br><a href="https://bk.tw.lvfukeji.com/wiki/%E7%89%A9%E8%81%94%E7%BD%91">物联网</a>（英语：Internet of Things，简称IoT）是一种计算设备、机械、数字机器相互关系的系统，具备通用唯一识别码（UID），并具有通过网络传输数据的能力，无需人与人、或是人与设备的交互。</p>
<p>近年以来，随着互联网产业发展日趋成熟，产业链及基础生态环境相当完善，市场容量已趋饱和，物联网作为下一个风口，成为众多设备制造商、网络供应商、系统集成商看好的突破方向。十二五之后，国家对中国制造产业升级提出明确的改革口号，为整个行业得到国家的政策支持提供了有力保障。</p>
<p>全球都将物联网视为信息技术的第三次浪潮，确立未来信息社会竞争优势的关键。据美国独立市场研究机构Forrester预测，物联网所带来的产业价值要比互联网高30倍，到2020年，中国物联网产业将经历应用创新、技术创新、服务创新三个关键的发展阶段，成长为一个超过五万亿规模的巨大市场。<a href="https://blog.csdn.net/duozhishidai/article/details/89043817">[4]</a></p>
<h1 id="营销方式"><a href="#营销方式" class="headerlink" title="营销方式"></a>营销方式</h1><h2 id="病毒营销"><a href="#病毒营销" class="headerlink" title="病毒营销"></a>病毒营销</h2><p><a href="https://baike.baidu.com/item/%E7%97%85%E6%AF%92%E8%90%A5%E9%94%80/190640?fr=aladdin">病毒营销</a>（Viral Marketing，又称病毒式营销、病毒性营销 、基因营销或核爆式营销），是利用公众的积极性和人际网络，让营销信息像病毒一样传播和扩散，营销信息被快速复制传向数以万计、数以百万计的观众，它能够像病毒一样深入人脑，快速复制，迅速传播，将信息短时间内传向更多的受众。病毒营销是一种常见的网络营销方法，常用于进行网站推广、品牌推广等。</p>
<p>大家了解的拼多多，就是忠实的病毒营销玩家，通过各种丰富的活动内容，促进用户进行分享裂变，实现有效传播。<br><img src="https://pic.rmb.bdstatic.com/bjh/4766df6e851e9cbb0ca66efbf79126eb.png" alt="image.png" srcset="/img/loading.gif" data-src="https://pic.rmb.bdstatic.com/bjh/4766df6e851e9cbb0ca66efbf79126eb.png" class="lozad post-image"></p>
<h2 id="饥饿营销"><a href="#饥饿营销" class="headerlink" title="饥饿营销"></a>饥饿营销</h2><p><a href="https://baike.baidu.com/item/%E9%A5%A5%E9%A5%BF%E8%90%A5%E9%94%80">饥饿营销</a>，运用于商品或服务的商业推广，是指商品提供者有意调低产量，以期达到调控供求关系、制造供不应求“假象”、以维护产品形象并维持商品较高售价和利润率的营销策略。</p>
<p>当然，这种方法要适度，用得好可以使品牌形象得到提升，用得不好会引起用户的反感。比如咱们都知道小米手机，一度就曾饥饿营销过度。<br><img src="https://pic.rmb.bdstatic.com/bjh/a9483dd5ab75c08bff7eb58eb97d111b.png" alt="image.png" srcset="/img/loading.gif" data-src="https://pic.rmb.bdstatic.com/bjh/a9483dd5ab75c08bff7eb58eb97d111b.png" class="lozad post-image"></p>
<h2 id="借势营销"><a href="#借势营销" class="headerlink" title="借势营销"></a>借势营销</h2><p><a href="https://baike.baidu.com/item/%E5%80%9F%E5%8A%BF%E8%90%A5%E9%94%80">借势营销</a>，是将销售的目的隐藏于营销活动之中，将产品的推广融入到一个消费者喜闻乐见的环境里，使消费者在这个环境中了解产品并接受产品的营销手段。</p>
<p>具体表现为通过媒体争夺消费者眼球、借助消费者自身的传播力、依靠轻松娱乐的方式等潜移默化地引导市场消费。换言之，便是通过顺势、造势、借势等方式，以求提高企业或产品的知名度、美誉度，树立良好的品牌形象，并最终促成产品或服务销售的营销策略。</p>
<p>但对于中国多如牛毛的企业来说，能很好的运用借势营销手段的人少之又少。很多企业在运用借势营销时，总是浪费资源、耗费精力而毫无所获。<br><img src="https://pic.rmb.bdstatic.com/bjh/e0f7495fae85a039f64ed09ba741d0e7.png" alt="image.png" srcset="/img/loading.gif" data-src="https://pic.rmb.bdstatic.com/bjh/e0f7495fae85a039f64ed09ba741d0e7.png" class="lozad post-image"></p>
<h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>以上便是对互联网时代的热点领域和营销方法的简要介绍，感谢您的浏览</p>
]]></content>
      <categories>
        <category>Idea</category>
      </categories>
  </entry>
  <entry>
    <title>Hexo+Gitee博客搭建详细教程</title>
    <url>/2020/09/13/hexo-create/</url>
    <content><![CDATA[<h1 id="Hexo-Gitee博客搭建详细教程"><a href="#Hexo-Gitee博客搭建详细教程" class="headerlink" title="Hexo+Gitee博客搭建详细教程"></a>Hexo+Gitee博客搭建详细教程</h1><p><a href="https://hexo.io/">Hexo</a>是一个快速、简洁且高效的博客框架。Hexo使用<a href="https://daringfireball.net/projects/markdown/">Markdown</a>(或其他渲染引擎)解析文章，在几秒内，即可利用靓丽的主题生成静态网页。（节选自Hexo）</p>
<p><br><br><br></p>
<h2 id="一、环境配置"><a href="#一、环境配置" class="headerlink" title="一、环境配置"></a>一、环境配置</h2><p><br></p>
<ul>
<li><a href="https://git-scm.com/">Git</a><blockquote>
<p>安装过程详情可以参照以下博客《Windows系统Git安装教程（详解Git安装过程）》<a href="https://www.cnblogs.com/xueweisuoyong/p/11914045.html">https://www.cnblogs.com/xueweisuoyong/p/11914045.html</a></p>
</blockquote>
</li>
<li><a href="https://nodejs.org/en/">Nodejs</a><blockquote>
<p>安装过程详情可以参照以下博客《windows系统下Node.js安装以及环境变量配置》<a href="https://www.cnblogs.com/hua-developer/p/12446235.html">https://www.cnblogs.com/hua-developer/p/12446235.html</a></p>
</blockquote>
</li>
</ul>
<p>（注意，安装目录我使用的是D盘，大家可以按个人喜好选择，以下内容都以安装在D盘为例）</p>
<p><br><br><br></p>
<h2 id="二、Hexo的安装"><a href="#二、Hexo的安装" class="headerlink" title="二、Hexo的安装"></a>二、Hexo的安装</h2><p><br></p>
<p>在D盘（之前所选择的安装目录下）右键Git Bash Here使用如下指令安装Hexo架构</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">npm</span> <span class="token function">install</span> hexo-cli -g<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>或指定全局安装<br><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">npm</span> <span class="token function">install</span> -g hexo<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><br>等待Hexo架构完成（大概几分钟）</p>
<p>我们在Windows10平台使用Gitee+Hexo搭建博客前，需要先在本地建立一个用来存储个人博客的目录，例如可以选择在D盘新建文件夹blog。</p>
<p><img src="/2020/09/13/hexo-create/2.jpg" alt srcset="/img/loading.gif" data-src="/2020/09/13/hexo-create/2.jpg" class="lozad post-image"></p>
<p>创建文件夹后，只需在blog目录下单击右键启动Git Bash Here,输入如下命令完成博客的初始化<br><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo init<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><br>之后依次使用如下指令（依旧在上述端口中）<br><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo clean
$ hexo generator <span class="token comment">#或者 hexo g</span>
$ hexo server <span class="token comment">#或者 hexo s</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><br>然后就可以打开本地浏览器搜索<a href="http://localhost:4000，查看你的博客了。到此，博客算是完成了初步构建。">http://localhost:4000，查看你的博客了。到此，博客算是完成了初步构建。</a></p>
<p><br><br><br></p>
<h2 id="三、-博客主题的下载和更换（选择性浏览）"><a href="#三、-博客主题的下载和更换（选择性浏览）" class="headerlink" title="三、*博客主题的下载和更换（选择性浏览）"></a>三、*博客主题的下载和更换（选择性浏览）</h2><p><br></p>
<p>Hexo默认的主题是landscape，如果你想更换主题可以尝试在Hexo主题界面下载<a href="https://hexo.io/themes/">themes</a></p>
<p><br></p>
<h3 id="具体操作流程如下"><a href="#具体操作流程如下" class="headerlink" title="具体操作流程如下"></a>具体操作流程如下</h3><p><br></p>
<p>搜索主题 -&gt; 点击主题（有的主题可能无法加载） -&gt; 复制网站链接 -&gt;<br>在blog文件目录下找到theme文件夹 -&gt; 进入文件夹后右键打开Git Bash Here，输入如下指令<br><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> clone <span class="token punctuation">(</span>将网站链接粘贴到此处<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><br>然后等待一段时间，你所心仪的主题便下好了。之后只需在blog目录下找到_config.yml文件，即网站配置文件。用vs code打开网站配置文件，找到theme一栏</p>
<p><img src="/2020/09/13/hexo-create/3.png" alt srcset="/img/loading.gif" data-src="/2020/09/13/hexo-create/3.png" class="lozad post-image">  </p>
<p>将theme一栏改为你所下载的主题文件名即可。（此处我下载的是<a href="https://demo.theme-kaze.top/">hexo-theme-Kaze</a>主题，点击后可以查看kaze主题的相关安装及配置）</p>
<p><br><br><br></p>
<h2 id="四、Gitee的部署"><a href="#四、Gitee的部署" class="headerlink" title="四、Gitee的部署"></a>四、Gitee的部署</h2><p>首先你需要注册<a href="https://gitee.com">Gitee</a>的账号，接下来只需要新建独属于你的仓库，如图  </p>
<p><img src="/2020/09/13/hexo-create/4.jpg" alt srcset="/img/loading.gif" data-src="/2020/09/13/hexo-create/4.jpg" class="lozad post-image"><br>新建仓库名为: (你的昵称)<br>例如：muo123<br>然后选择语言为HTML，仓库属性为共有public，其余可以不用管，之后点击创建，你就拥有了属于你自己的个性仓库了！    </p>
<p>之后我们需要做的就是把本地的博客部署到Gitee上。首先，我们需要打开网站配置文件<br><img src="/2020/09/13/hexo-create/5.png" alt srcset="/img/loading.gif" data-src="/2020/09/13/hexo-create/5.png" class="lozad post-image"><br>对这几项进行修改，我的配置如下<br><img src="/2020/09/13/hexo-create/9.png" alt srcset="/img/loading.gif" data-src="/2020/09/13/hexo-create/9.png" class="lozad post-image"><br>repo为你的仓库名，可以在你的Gitee仓库处复制过来<br><img src="/2020/09/13/hexo-create/7.png" alt srcset="/img/loading.gif" data-src="/2020/09/13/hexo-create/7.png" class="lozad post-image">   </p>
<p>完成这些布置后，只需在blog目录下右键Git Bash输入指令下载插件<br><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">npm</span> <span class="token function">install</span> hexo-deployer-git --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><br>然后Gitee部署三连<br><pre class="line-numbers language-none"><code class="language-none">$ hexo clean
$ hexo g
$ hexo d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><br>然后你就会发现你的仓库中出现了blog的目录，</p>
<p><img src="/2020/09/13/hexo-create/8.png" alt srcset="/img/loading.gif" data-src="/2020/09/13/hexo-create/8.png" class="lozad post-image"></p>
<p>接下来点击service（服务），便可以找到Gitee Pages，点击创建就可以看见你梦寐以求的博客啦。</p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
  </entry>
  <entry>
    <title>Construct3制作射击小游戏（新手向）</title>
    <url>/2020/10/04/construct3/</url>
    <content><![CDATA[<h1 id="Construct3制作射击小游戏（新手向）"><a href="#Construct3制作射击小游戏（新手向）" class="headerlink" title="Construct3制作射击小游戏（新手向）"></a>Construct3制作射击小游戏（新手向）</h1><p>本教程将指导初学者制作一个简易的射击小游戏</p>
<p><br></p>
<h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><p><br></p>
<p>首先访问Construct3平台，点击相关链接<a href="https://editor.construct.net/">editor.construct.net</a>，即可在浏览器在线制作属于自己的小游戏，并不需要安装或设置相关文件，非常方便。</p>
<p><br></p>
<h3 id="创建新项目"><a href="#创建新项目" class="headerlink" title="创建新项目"></a>创建新项目</h3><p><br></p>
<p>单击<font color="orange">new project</font>按钮,之后将出现对话框，直接点击<font color="orange">create</font>创建新项目即可，然后可以看到类似下面的新建项目。<br><img src="/2020/10/04/construct3/1.png" alt srcset="/img/loading.gif" data-src="/2020/10/04/construct3/1.png" class="lozad post-image"><br><img src="/2020/10/04/construct3/2.png" alt srcset="/img/loading.gif" data-src="/2020/10/04/construct3/2.png" class="lozad post-image"></p>
<p><br></p>
<h2 id="添加对象"><a href="#添加对象" class="headerlink" title="添加对象"></a>添加对象</h2><p><br></p>
<p>接下来添加游戏所需要的对象</p>
<p><br></p>
<h3 id="添加背景"><a href="#添加背景" class="headerlink" title="添加背景"></a>添加背景</h3><p><br></p>
<p>双击或右键点击空白处选择<font color="orange">insert new object</font>,找到<font color="orange">Tiled Baekground</font>后双击。<br><img src="/2020/10/04/construct3/3.png" alt srcset="/img/loading.gif" data-src="/2020/10/04/construct3/3.png" class="lozad post-image"><br>此时鼠标会指向十字线，代表图像将要放置的位置，单击布局中间某处，打开图像编辑器。可以选择自己画背景或从文件中导入图片作为游戏的背景。关掉编辑器即可看到自己的背景图，然后右键点击<font color="orange">Align</font>选择<font color="orange">Cover Layout</font>即可将背景平铺到空白处。<br><img src="/2020/10/04/construct3/4.png" alt srcset="/img/loading.gif" data-src="/2020/10/04/construct3/4.png" class="lozad post-image"><br>为了防止之后添加图像挪动背景，可以选择将背景<font color="orange">Lock</font>，右键单击可以看到相关选项。</p>
<p><br></p>
<h3 id="添加输入对象"><a href="#添加输入对象" class="headerlink" title="添加输入对象"></a>添加输入对象</h3><p><br></p>
<p>双击或右键打开菜单栏<font color="orange">insert new object</font>添加输入对象<font color="orange">Mouse</font>或<font color="orange">Keyboard</font>，以确保游戏接受鼠标或键盘输入。</p>
<p><br></p>
<h3 id="添加游戏对象"><a href="#添加游戏对象" class="headerlink" title="添加游戏对象"></a>添加游戏对象</h3><p><br></p>
<p>按照类似添加背景的方式添加游戏对象：玩家、子弹、精灵以及爆炸图象。双击或右键打开菜单栏添加<font color="orange">Sprites</font>,并且分别为图像进行命名防止混淆。</p>
<p><br></p>
<h2 id="添加行为"><a href="#添加行为" class="headerlink" title="添加行为"></a>添加行为</h2><p><br></p>
<p>为玩家、子弹、精灵等对象添加行为以让他们按照我们想要的方式进行活动，平台提供的行为有多种选择</p>
<p><img src="/2020/10/04/construct3/5.png" alt srcset="/img/loading.gif" data-src="/2020/10/04/construct3/5.png" class="lozad post-image"><br><img src="/2020/10/04/construct3/6.png" alt srcset="/img/loading.gif" data-src="/2020/10/04/construct3/6.png" class="lozad post-image"><br>单击对象，找到左边的菜单<font color="orange">Behaviors</font>添加行为的方式如下图所示<br><img src="/2020/10/04/construct3/7.png" alt srcset="/img/loading.gif" data-src="/2020/10/04/construct3/7.png" class="lozad post-image"><br><pre class="line-numbers language-none"><code class="language-none">玩家行为：8 direction(8方向移动)、ScorllTo（将镜头聚焦到玩家身上）、BoundToLayout（将玩家的活动范围固定防止移动到背景外）

子弹行为：Bullet（子弹运动）、Destroy outside layout（销毁子弹防止移动到背景外）

爆炸行为：Fade（爆炸对象出现时采用淡入淡出的动画形式）

精灵行为：Bullet（方便系统控制精灵行为）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>
<p><br></p>
<h2 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h2><p><br></p>
<p>首先，单击顶部的选项卡<font color="orange">Event sheet1</font>以切换到”事件工作表视图”。事件列表称为事件表 ，你可以为游戏的不同部分或组织使用不同的事件表。</p>
<p><br></p>
<h3 id="玩家活动"><a href="#玩家活动" class="headerlink" title="玩家活动"></a>玩家活动</h3><p><br></p>
<p>让玩家按照你所想要的方式活动，例如让玩家视野跟随鼠标，事件如图：<br><img src="/2020/10/04/construct3/9.png" alt srcset="/img/loading.gif" data-src="/2020/10/04/construct3/9.png" class="lozad post-image"><br>具体操作过程如下：<br><img src="/2020/10/04/construct3/10.png" alt srcset="/img/loading.gif" data-src="/2020/10/04/construct3/10.png" class="lozad post-image"><br><img src="/2020/10/04/construct3/11.png" alt srcset="/img/loading.gif" data-src="/2020/10/04/construct3/11.png" class="lozad post-image"><br><img src="/2020/10/04/construct3/12.png" alt srcset="/img/loading.gif" data-src="/2020/10/04/construct3/12.png" class="lozad post-image"><br><img src="/2020/10/04/construct3/13.png" alt srcset="/img/loading.gif" data-src="/2020/10/04/construct3/13.png" class="lozad post-image"><br><img src="/2020/10/04/construct3/14.png" alt srcset="/img/loading.gif" data-src="/2020/10/04/construct3/14.png" class="lozad post-image"></p>
<p>让玩家能够发射子弹，事件如下：<br><img src="/2020/10/04/construct3/15.png" alt srcset="/img/loading.gif" data-src="/2020/10/04/construct3/15.png" class="lozad post-image"><br>按照所述相关路径执行操作即可，这些不过多叙述。</p>
<p><br></p>
<h3 id="子弹活动"><a href="#子弹活动" class="headerlink" title="子弹活动"></a>子弹活动</h3><p><br></p>
<p><img src="/2020/10/04/construct3/16.png" alt srcset="/img/loading.gif" data-src="/2020/10/04/construct3/16.png" class="lozad post-image"></p>
<p><br></p>
<h3 id="精灵活动"><a href="#精灵活动" class="headerlink" title="精灵活动"></a>精灵活动</h3><p><br></p>
<p><img src="/2020/10/04/construct3/17.png" alt srcset="/img/loading.gif" data-src="/2020/10/04/construct3/17.png" class="lozad post-image"></p>
<p><br></p>
<h3 id="使用实例变量"><a href="#使用实例变量" class="headerlink" title="使用实例变量"></a>使用实例变量</h3><p><br></p>
<p>实例变量允许不同的对象拥有属于自己的属性，变量是可以更改的。我们可以对精灵添加一个实例变量<font color="orange">health</font>来让精灵拥有更长的生命值，而不是子弹一碰就发生爆炸。添加过程如图：<br><img src="/2020/10/04/construct3/18.png" alt srcset="/img/loading.gif" data-src="/2020/10/04/construct3/18.png" class="lozad post-image"><br><img src="/2020/10/04/construct3/19.png" alt srcset="/img/loading.gif" data-src="/2020/10/04/construct3/19.png" class="lozad post-image"><br>我们可以设置条件，当子弹击中精灵时，扣除一定健康值，为游戏体验增加趣味性。将原来的事件进行修改如下：<br><img src="/2020/10/04/construct3/20.png" alt srcset="/img/loading.gif" data-src="/2020/10/04/construct3/20.png" class="lozad post-image"><br><img src="/2020/10/04/construct3/21.png" alt srcset="/img/loading.gif" data-src="/2020/10/04/construct3/21.png" class="lozad post-image"><br>此时精灵经受多次射击才会发生爆炸。</p>
<p><br></p>
<h3 id="使用全局变量"><a href="#使用全局变量" class="headerlink" title="使用全局变量"></a>使用全局变量</h3><p><br></p>
<p>为了显示我们游戏的分数，需要一个全局变量来显示。右键单击事件工作表底部的空间，选择全局变量。<br><img src="/2020/10/04/construct3/22.png" alt srcset="/img/loading.gif" data-src="/2020/10/04/construct3/22.png" class="lozad post-image"><br><img src="/2020/10/04/construct3/23.png" alt srcset="/img/loading.gif" data-src="/2020/10/04/construct3/23.png" class="lozad post-image"><br>修改之前的事件<br><img src="/2020/10/04/construct3/24.png" alt srcset="/img/loading.gif" data-src="/2020/10/04/construct3/24.png" class="lozad post-image"><br>然后我们需要添加信新图层，用来显示我们的游戏分数。找到屏幕右下角的图层栏：<br><img src="/2020/10/04/construct3/26.png" alt srcset="/img/loading.gif" data-src="/2020/10/04/construct3/26.png" class="lozad post-image"><br>右键单击选择<font color="orange">Add layer at top</font>,将名称改为<font color="orange">HUD</font>,然后在HUD的属性栏修改<font color="orange">Parallax</font>。<br><img src="/2020/10/04/construct3/27.png" alt srcset="/img/loading.gif" data-src="/2020/10/04/construct3/27.png" class="lozad post-image"><br>之后我们需要添加一个文本对象，使用顶部的选项卡切换回布局视图，双击空白处添加文本对象<font color="orange">Text</font>,并将它放在左上角，你可以在它的属性栏里修改它的颜色，大小和位置等。<br><img src="/2020/10/04/construct3/28.png" alt srcset="/img/loading.gif" data-src="/2020/10/04/construct3/28.png" class="lozad post-image"><br>最后回到工作事件表，添加事件：<br><img src="/2020/10/04/construct3/30.png" alt srcset="/img/loading.gif" data-src="/2020/10/04/construct3/30.png" class="lozad post-image"></p>
<p><br></p>
<h3 id="自动生成精灵"><a href="#自动生成精灵" class="headerlink" title="自动生成精灵"></a>自动生成精灵</h3><p><br></p>
<p>为了让精灵持续出现，我们需要添加如下事件，让系统自动产生精灵。<br><img src="/2020/10/04/construct3/29.png" alt srcset="/img/loading.gif" data-src="/2020/10/04/construct3/29.png" class="lozad post-image"></p>
<p><br></p>
<h3 id="游戏结束条件"><a href="#游戏结束条件" class="headerlink" title="游戏结束条件"></a>游戏结束条件</h3><p><br></p>
<p>此时，我们发现玩家是不会自动触发游戏结束的条件，所以我们还要添加事件，让玩家在碰到精灵时游戏结束，添加如下条件：<br><img src="/2020/10/04/construct3/31.png" alt srcset="/img/loading.gif" data-src="/2020/10/04/construct3/31.png" class="lozad post-image"></p>
<p><br></p>
<p>至此，我们的游戏算是初步完成了，除了上面的事件外，我们还可以继续完善它，例如添加不同的精灵，让精灵随着时间逐渐加速、达到触发条件增加子弹数量等等。</p>
<p><br></p>
<h2 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h2><p><br></p>
<p>下面附上我的游戏链接和相关游戏视频：<br>游戏链接：<a href="https://www.construct.net/en/free-online-games/shooter-18244/play">shooter</a>  </p>
<p>视频链接：<a href="https://www.bilibili.com/video/BV1Ny4y1C7pR">shooter体验视频</a></p>
]]></content>
      <categories>
        <category>Construct3</category>
      </categories>
  </entry>
  <entry>
    <title>将心放在属于自己的时代</title>
    <url>/2021/06/22/heart&amp;life/</url>
    <content><![CDATA[<p>&ensp;&ensp;读书是为了享受他人的思考，同时激发自己的思考。这背后都暗藏着美的激情。我相信，真正热爱思考的人会知道自己的方向。所以说，重要的是你把心放在哪一个时代，而不是把身放在哪一座庙。庙不重要，重要的是你的心，以及你所相信并热爱的一切。”——《心有所往，庙不可言》  </p>
<p>&ensp;&ensp;用笔记本记录下了这样一段书摘，朴素而又充满真理的表达让我回想起多日未曾触碰的日志文档，也藉此抒发像小山一样堆积起来的情绪。昨日在翻阅过往日志的期间，也思考过寻找恰当的时机，将自己的不太成熟的想法轻轻表露。无论是苦涩的，还是甜蜜的，任何的品味在回忆中都是独特的存在，我希望它们在字里行间保持原来的姿态，肆意挥洒。  </p>
<p>&ensp;&ensp;许多时候，和别人谈起自己的作为，我都有着特殊的焦虑，这份焦虑可能来自过去，也或许来自未来，也可能就在当下。求学须保持严谨的态度和细心的品质，现在的我却丧失了许多必要的激情，而将精力花费在芜杂的事件簿。每个人或许都有过幻想，能够多面玲珑地处理突如其来的危机，可是时间的单一性让并发处理事件的行为只存在于个人幻想中。区分事件的轻重缓急，一直是我苦恼的难题，在休闲中觅得灵感后，结果却往往是无疾而终。  </p>
<p>&ensp;&ensp;热爱思考是学习中必要的品质，人无时无刻不在学习，但无收获的重复劳动也一直在进行。思考鲜少追究问题的本质，许多亮点被轻易的放过，这个过程就像在用望远镜观察宇宙中的点点星辰，只知道星辰在发光发亮，却不知道它因何而生，又因何而灭。真正的亮点往往存在于被人们忽视的角落，而非表面的靓丽。本质所支撑的表象，总是带着神秘的迷惑性，“知其所以然，知其非所以然”显得越加必要。  </p>
<p>&ensp;&ensp;将心放在属于自己的地方，这是寡头的承诺，而自身便是个人思想的寡头。这让我想起言语的艺术性，艺术性在于其可以在可实现和不可实现两种状态自由切换。真正意义上的言不由衷和言语由衷的区分，在于自身付出的代价。也并不是说，付出代价越多便能达到更高的层次，只是，投入必要的激情，付出足够的代价，就像在苦到极致的中药中加入适量的糖，埋头饮下这独特的回甘。    </p>
<p>&ensp;&ensp;相信自己所热爱的一切，享受他人思考，激发自己的思考，时间开销需要用心管理，请郑重地把心放在属于自己的这个时代。</p>
]]></content>
      <categories>
        <category>Idea</category>
      </categories>
  </entry>
</search>
