<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>关于Hexo+Gitee博客搭建时遇到的一些问题以及解决方案</title>
    <url>/2020/09/13/fault/</url>
    <content><![CDATA[<h1 id="关于Hexo-Gitee博客搭建时遇到的一些问题以及解决方案"><a href="#关于Hexo-Gitee博客搭建时遇到的一些问题以及解决方案" class="headerlink" title="关于Hexo+Gitee博客搭建时遇到的一些问题以及解决方案"></a>关于Hexo+Gitee博客搭建时遇到的一些问题以及解决方案</h1><p><br></p>
<font color = 00BFFF>

## localhost重定向次数过多

</font>
<br>

对于这个问题，搜过很多方案，例如<font color = red>删除cookies，卸载浏览器重装，删除博客所有内容等，</font>结果都以失败告终。 


出现这样的情况，可能是因为我每次建博客失败，删除文档重来时，一直使用的新建文件夹名称都是hexo，使用<font color = red>hexo s</font>指令生成静态页面时，使得本地访问出现地址循环定向之类的问题（这只是我个人浅陋的想法，我对网页重定向也没有很深入的了解）。     


我最后解决这个问题的方案是删除hexo文档，之后新建文档命名为blog，在blog目录下重新建立博客，再用<font color = red>hexo s</font>指令生成网页，发现最后没有出现重定向次数过多的问题。    

<font color = 87CEEB>（ps：虽然删档重来的确很难受，我此前已经删档重来了不下十次，所以，这个解决方案对我来说还可以接受）</font>

<p><br><br><br></p>
<font color = 00BFFF>

## Gitee Pages部署失败（主题没有样式或使用hexo d指令无法推送博客内容）

</font>
<br>

主题没有样式的问题，大概是本地生成网页正常，部署到Gitee Pages上后主题消失，页面回到十年前，简直降维打击的感觉。这个我也搜过许多解决方案，例如<font color = red>改变网站配置文件root的路径，将它改为“root: .”（这是指在当前目录搜索，没有样式的原因可能是网站搜索不到相关文件，打开网站检查可以看见一堆404）。</font>不过，之后我发现，不用更改root也可以直接访问页面。当初样式消失的问题可能是当初我不小心修改了某些文件，如果按照教程来做的话，应该不会碰到相关问题。   



无法推送博客的问题，比较难解释，我之前部署了公钥，总出现问题，后来我直接删除了公钥，结果还是存在问题。大概可以排除公钥的因素，不过，如果你想对仓库进行写入操作，<font color = red>公钥必须是个人公钥才行，否则部署时也会部署不上去。</font>之后，我们来谈谈我是如何解决最终问题的。      


<font color = red>最后我发现，问题出现在仓库名称上--xxx.gitee.io。</font>这样命名的仓库名称是万恶的来源，具体原因和解决方案可以在[Gitee Page](https://gitee.com/help/articles/4136#article-header0)原网页找到。具体是pages的二级目录的问题，只要把仓库名的后缀删去即可，这样就没有了相应配置文件的相对路径问题。     

<font color = 87CEEB>（注意，你的仓库名必须为你Gitee上的昵称。）</font>
]]></content>
      <categories>
        <category>homework</category>
      </categories>
  </entry>
  <entry>
    <title>第1周作业</title>
    <url>/2020/09/21/h1/</url>
    <content><![CDATA[<h1 id="词条解释"><a class="markdownIt-Anchor" href="#词条解释"></a> 词条解释</h1>
<p>-<font color="orange">Computer</font> : A computer is a machine that can be instructed to carry out sequences of arithmetic or logical operations automatically via computer programming.</p>
<p>-<font color="orange">Computer science</font>   : Computer science is the study of computation and information</p>
<p>-<font color="orange">Software</font>  : Computer software, or simply software, is a collection of data or computer instructions that tell the computer how to work.</p>
<p>-<font color="orange">Software engineering</font>  : Software engineering is the systematic application of engineering approaches to the development of software.[1][2][3] Software engineering is a computing discipline.</p>
<p>-<font color="orange"> Alan Turing</font> : Alan Mathison Turing OBE FRS (/ˈtjʊərɪŋ/; 23 June 1912 – 7 June 1954) was an English mathematician, computer scientist, logician, cryptanalyst, philosopher, and theoretical biologist.</p>
<p>-<font color="orange"> Moore’s law</font> : Moore’s law is the observation that the number of transistors in a dense integrated circuit (IC) doubles about every two years.</p>
]]></content>
      <categories>
        <category>homework</category>
      </categories>
  </entry>
  <entry>
    <title>第2周作业</title>
    <url>/2020/09/21/h2/</url>
    <content><![CDATA[<h2 id="进制转换"><a class="markdownIt-Anchor" href="#进制转换"></a> 进制转换</h2>
<br>
<ul>
<li><font color="orange">1分12秒</font>  = (72000)毫秒</li>
<li><font color="orange">(7A)<sub>13</sub></font> =  (101)<sub>10</sub></li>
<li><font color="orange">(7A)<sub>16</sub></font>  =  (122)<sub>10</sub></li>
<li><font color="orange">(7A)<sub>16</sub></font>  = (1111010)<sub>2</sub> = (172)<sub>8</sub></li>
<li><font color="orange">(1011011)<sub>2</sub></font> = (133)<sub>8</sub> = (5B)<sub>16</sub></li>
<li><font color="orange">(678)<sub>10</sub></font>  = (1010100110)<sub>2</sub> = (1246)<sub>8</sub></li>
<li><font color="orange">(111)<sub>2</sub> + (101)<sub>2</sub></font> = (1100)<sub>2</sub><br>
<br></li>
</ul>
<h2 id="关键词解释"><a class="markdownIt-Anchor" href="#关键词解释"></a> 关键词解释</h2>
<br>
-<font color="orange">Information</font>   : Information can be thought of as the resolution of uncertainty; it is that which answers the question of "What an entity is" and thus defines both its essence and nature of its characteristics.   
<p>-<font color="orange">Positional notation</font>  : Positional notation (or place-value notation, or positional numeral system) denotes usually the extension to any base of the Hindu–Arabic numeral system (or decimal system).<br>
-<font color="orange">Algorithm</font>  :   In mathematics and computer science, an algorithm (/ˈælɡərɪðəm/ (About this soundlisten)) is a finite sequence of well-defined, computer-implementable instructions, typically to solve a class of problems or to perform a computation.<br>
-<font color="orange">)Software bug</font>  : A software bug is an error, flaw or fault in a computer program or system that causes it to produce an incorrect or unexpected result, or to behave in unintended ways.</p>
<br>
<h2 id="英文单词"><a class="markdownIt-Anchor" href="#英文单词"></a> 英文单词</h2>
<br>
<ul>
<li><font color="orange">十进制</font> -&gt;Decimal</li>
<li><font color="orange">二进制</font>  -&gt;Binary</li>
<li><font color="orange">八进制</font>   -&gt;Octal</li>
<li><font color="orange">十六进制</font>  -&gt;Hexadecimal</li>
</ul>
]]></content>
      <categories>
        <category>homework</category>
      </categories>
  </entry>
  <entry>
    <title>第3周作业</title>
    <url>/2020/09/21/h3/</url>
    <content><![CDATA[<p><br></p>
<p><img src="/2020/09/21/h3/1.png" alt srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/2020/09/21/h3/1.png" class="lozad post-image lozad post-image" srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/2020/09/21/h3/1.png"><br><img src="/2020/09/21/h3/2.png" alt srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/2020/09/21/h3/2.png" class="lozad post-image lozad post-image" srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/2020/09/21/h3/2.png"></p>
<h2 id="计算"><a href="#计算" class="headerlink" title="计算"></a>计算</h2><hr>
<p><br></p>
<p>1）<font color="orange">x</font> = 0100 0011 <font color="orange">y</font> = 1111 1001 <font color="orange">z</font> = 1011 0110<br>2）<font color="orange">溢出</font><br>3）<font color="orange">x</font> = 1101 0011<br>4）<font color="orange">x</font> = 0111 1111 <font color="orange">y</font> = 1111 1001 <font color="orange">z溢出</font><br>5）<font color="orange">x</font> = 1 . 001<br>6）<font color="orange">x</font> = 11001 . 0<br>7）<font color="orange">x</font>出现精度误差</p>
<p><br></p>
<h2 id="概念解释"><a href="#概念解释" class="headerlink" title="概念解释"></a>概念解释</h2><hr>
<p>-<font color="orange">Method of complements</font> : In mathematics and computing, the method of complements is a technique to encode a symmetric range of positive and negative integers in a way that they can use the same algorithm (hardware) for addition throughout the whole range.<br>-<font color="orange">Byte</font> : The byte is a unit of digital information that most commonly consists of eight bits.<br>-<font color="orange">Integer (computer science)
</font> :  In computer science, an integer is a datum of integral data type, a data type that represents some range of mathematical integers.<br>-<font color="orange">Floating point</font> : In computing, floating-point arithmetic (FP) is arithmetic using formulaic representation of real numbers as an approximation to support a trade-off between range and precision.<br><br></p>
<h2 id="阅读“Method-of-cpmplements”"><a href="#阅读“Method-of-cpmplements”" class="headerlink" title="阅读“Method of cpmplements”"></a>阅读“Method of cpmplements”</h2><hr>
<p><font color="orange">1) </font>假设运算使用n位二进制数，其模数为2<sup>n</sup>,数 a 为一个用n位二进制表示的常数，数 x 为一个用n位二进制表示的变数，推导如下：<br>a - x = $2^n$ % $2^n$ + (a - x) % $2^n$<br> = ($2^n$ + (a - x)) % $2^n$<br> = (a + $2^n$ - x) % $2^n$<br> = a % $2^n$ + ($2^n$ - x) % $2^n$<br> = a + ($2^n$ - x)<br>于是 x补码 = $2^n$ - x<br>一个数的全部二进制位取反则得到其反码，由此可知，如果一个数加上它的反码，则此全部二进制位是满的，也就是全部是1，其值为<br>x反码 + x = $2^{n-1}$ + $2^{n-2}$ + … + $2^2$ + $2^1$+ $2^0$ = $2^n$ – 1<br>X反码 = $2^n$ - 1 - x<br>综上可得 : X补码 = X反码 + 1 </p>
<p><font color="orange">2) </font>用八进制描述变量x：x = 0361</p>
<p><br></p>
<h2 id="阅读“Two’s-complement”"><a href="#阅读“Two’s-complement”" class="headerlink" title="阅读“Two’s complement”"></a>阅读“Two’s complement”</h2><hr>
<p>1）x = 0xe1 y = 0xffffffe1<br>过程：x = 1110 0001 -&gt; 符号扩展1111 1111 1111 1111 1111 1111 1110 0001 -&gt; y = x -&gt; y = 0xffffffe1<br><br></p>
<h2 id="阅读“Floating-point”"><a href="#阅读“Floating-point”" class="headerlink" title="阅读“Floating point”"></a>阅读“Floating point”</h2><hr>
<p><br></p>
<p>答：<font color="orange">NaN</font>（NotaNumber，非数）是计算机科学中数值数据类型的一类值，表示未定义或不可表示的值。常在浮点数运算中使用。首次引入NaN的是1985年的IEEE 754浮点数标准。</p>
]]></content>
      <categories>
        <category>homework</category>
      </categories>
  </entry>
  <entry>
    <title>Hexo+Gitee博客搭建详细教程</title>
    <url>/2020/09/13/test/</url>
    <content><![CDATA[<h1 id="Hexo-Gitee博客搭建详细教程"><a href="#Hexo-Gitee博客搭建详细教程" class="headerlink" title="Hexo+Gitee博客搭建详细教程"></a>Hexo+Gitee博客搭建详细教程</h1><p><a href="https://hexo.io/">Hexo</a>是一个快速、简洁且高效的博客框架。Hexo使用<a href="https://daringfireball.net/projects/markdown/">Markdown</a>(或其他渲染引擎)解析文章，在几秒内，即可利用靓丽的主题生成静态网页。（节选自Hexo）</p>
<p><br><br><br></p>
<h2 id="一、环境配置"><a href="#一、环境配置" class="headerlink" title="一、环境配置"></a>一、环境配置</h2><p><br></p>
<ul>
<li><a href="https://git-scm.com/">Git</a><blockquote>
<p>安装过程详情可以参照以下博客《Windows系统Git安装教程（详解Git安装过程）》<a href="https://www.cnblogs.com/xueweisuoyong/p/11914045.html">https://www.cnblogs.com/xueweisuoyong/p/11914045.html</a></p>
</blockquote>
</li>
<li><a href="https://nodejs.org/en/">Nodejs</a><blockquote>
<p>安装过程详情可以参照以下博客《windows系统下Node.js安装以及环境变量配置》<a href="https://www.cnblogs.com/hua-developer/p/12446235.html">https://www.cnblogs.com/hua-developer/p/12446235.html</a></p>
</blockquote>
</li>
</ul>
<p>（注意，安装目录我使用的是D盘，大家可以按个人喜好选择，以下内容都以安装在D盘为例）</p>
<p><br><br><br></p>
<h2 id="二、Hexo的安装"><a href="#二、Hexo的安装" class="headerlink" title="二、Hexo的安装"></a>二、Hexo的安装</h2><p><br></p>
<p>在D盘（之前所选择的安装目录下）右键Git Bash Here使用如下指令安装Hexo架构</p>
<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">npm</span> <span class="token function">install</span> hexo-cli -g<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>
<p>或指定全局安装<br><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">npm</span> <span class="token function">install</span> -g hexo<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><br>等待Hexo架构完成（大概几分钟）</p>
<p>我们在Windows10平台使用Gitee+Hexo搭建博客前，需要先在本地建立一个用来存储个人博客的目录，例如可以选择在D盘新建文件夹blog。</p>
<p><img src="test/2.jpg" alt="" srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="test/2.jpg" class="lozad post-image"></p>
<p>创建文件夹后，只需在blog目录下单击右键启动Git Bash Here,输入如下命令完成博客的初始化<br><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo init<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><br>之后依次使用如下指令（依旧在上述端口中）<br><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo clean
$ hexo generator <span class="token comment">#或者 hexo g</span>
$ hexo server <span class="token comment">#或者 hexo s</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><br>然后就可以打开本地浏览器搜索<a href="http://localhost:4000，查看你的博客了。到此，博客算是完成了初步构建。">http://localhost:4000，查看你的博客了。到此，博客算是完成了初步构建。</a></p>
<p><br><br><br></p>
<h2 id="三、-博客主题的下载和更换（选择性浏览）"><a href="#三、-博客主题的下载和更换（选择性浏览）" class="headerlink" title="三、*博客主题的下载和更换（选择性浏览）"></a>三、*博客主题的下载和更换（选择性浏览）</h2><p><br></p>
<p>Hexo默认的主题是landscape，如果你想更换主题可以尝试在Hexo主题界面下载<a href="https://hexo.io/themes/">themes</a></p>
<p><br></p>
<h3 id="具体操作流程如下"><a href="#具体操作流程如下" class="headerlink" title="具体操作流程如下"></a>具体操作流程如下</h3><p><br></p>
<p>搜索主题 -&gt; 点击主题（有的主题可能无法加载） -&gt; 复制网站链接 -&gt;<br>在blog文件目录下找到theme文件夹 -&gt; 进入文件夹后右键打开Git Bash Here，输入如下指令<br><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> clone <span class="token punctuation">(</span>将网站链接粘贴到此处<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><br>然后等待一段时间，你所心仪的主题便下好了。之后只需在blog目录下找到_config.yml文件，即网站配置文件。用vs code打开网站配置文件，找到theme一栏</p>
<p><img src="test/3.png" alt="" srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="test/3.png" class="lozad post-image">  </p>
<p>将theme一栏改为你所下载的主题文件名即可。（此处我下载的是<a href="https://demo.theme-kaze.top/">hexo-theme-Kaze</a>主题，点击后可以查看kaze主题的相关安装及配置）</p>
<p><br><br><br></p>
<h2 id="四、Gitee的部署"><a href="#四、Gitee的部署" class="headerlink" title="四、Gitee的部署"></a>四、Gitee的部署</h2><p>首先你需要注册<a href="https://gitee.com">Gitee</a>的账号，接下来只需要新建独属于你的仓库，如图  </p>
<p><img src="test/4.jpg" alt="" srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="test/4.jpg" class="lozad post-image"><br>新建仓库名为: (你的昵称)<br>例如：muo123<br>然后选择语言为HTML，仓库属性为共有public，其余可以不用管，之后点击创建，你就拥有了属于你自己的个性仓库了！    </p>
<p>之后我们需要做的就是把本地的博客部署到Gitee上。首先，我们需要打开网站配置文件<br><img src="test/5.png" alt="" srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="test/5.png" class="lozad post-image"><br>对这几项进行修改，我的配置如下<br><img src="test/9.png" alt="" srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="test/9.png" class="lozad post-image"><br>repo为你的仓库名，可以在你的Gitee仓库处复制过来<br><img src="test/7.png" alt="" srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="test/7.png" class="lozad post-image">   </p>
<p>完成这些布置后，只需在blog目录下右键Git Bash输入指令下载插件<br><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">npm</span> <span class="token function">install</span> hexo-deployer-git --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><br>然后Gitee部署三连<br><pre class="line-numbers language-none"><code class="language-none">$ hexo clean
$ hexo g
$ hexo d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><br>然后你就会发现你的仓库中出现了blog的目录，</p>
<p><img src="test/8.png" alt="" srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="test/8.png" class="lozad post-image"></p>
<p>接下来点击service（服务），便可以找到Gitee Pages，点击创建就可以看见你梦寐以求的博客啦。</p>
]]></content>
      <categories>
        <category>homework</category>
      </categories>
  </entry>
  <entry>
    <title>第4周作业</title>
    <url>/2020/09/26/h4/</url>
    <content><![CDATA[<p><br></p>
<h2 id="概念解释"><a href="#概念解释" class="headerlink" title="概念解释"></a>概念解释</h2><p><br></p>
<ul>
<li><font color="orange">ASCII</font> : ASCII (/ˈæskiː/  ASS-kee), abbreviated from American Standard Code for Information Interchange, is a character encoding standard for electronic communication. ASCII codes represent text in computers, telecommunications equipment, and other devices. Most modern character-encoding schemes are based on ASCII, although they support many additional characters.   </li>
<li><font color="orange">)Color</font> : Color (American English), or colour (Commonwealth English), is the characteristic of visual perception described through color categories, with names such as red, orange, yellow, green, blue, or purple. This perception of color derives from the stimulation of photoreceptor cells (in particular cone cells in the human eye and other vertebrate eyes) by electromagnetic radiation (in the visible spectrum in the case of humans).    </li>
</ul>
<p><br></p>
<h2 id="简答题"><a href="#简答题" class="headerlink" title="简答题"></a>简答题</h2><p><br></p>
<p>   1) 写出字符“A”,“中”的 ASCII 码、Unicode 码、utf-8 编码。</p>
<font color="orange">  

<table>
    <thead>
        <tr>
            <th>字符</th>
            <th>ASCII 码</th>
            <th>Unicode 码</th>
            <th> utf-8 编码</th>
        </tr>
    </thead>
    <tbody>
        <tr>
            <td>"A"</td>
            <td>0x41</td>
            <td>0x0041</td>
            <td>0x41</td>
        </tr>
        <tr>
            <td>"中" </td>
            <td>0xd6 / 0xd0</td>
            <td>0x4e2d</td>
            <td>0xe4 / 0xb8 / 0xad</td>
        </tr>
    </tbody>
</table>

</font>

<p><br></p>
<p>   1) 黄色(yellow)的RGB编码是</p>
<font color="orange">(0, 255, 255)</font>

<p><br></p>
<p>   3)  从网上下载一个 BMP 格式图像,用图片编辑工具另存在 jpg、 png、tiff 格式。问三种格式中,哪种格式显示质量好?相对于BMP 格式,压缩率各是多少?</p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>下载图像不同格式显示对比如下：<br><img src="/2020/09/26/h4/cmp.png" alt srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/2020/09/26/h4/cmp.png" class="lozad post-image">   </p>
<p><br></p>
<font color="orange"> 

<style>
table th:first-of-type {
    width: 200px;
}
</style>

<table>
    <thead>
        <tr>
            <th>图片格式</th>
            <th>占用空间</th>
            <th>空间比较百分比（与原bmp格式）</th>
        </tr>
    </thead>
    <tbody>
        <tr>
            <td>bmp</td>
            <td>458 KB (469,638 字节)</td>
            <td>100%</td>
        </tr>
        <tr>
            <td>jpg</td>
            <td>71.4 KB (73,210 字节)</td>
            <td>16%</td>
        </tr>
        <tr>
            <td>png</td>
            <td>261 KB (267,429 字节)</td>
            <td>57%</td>
        </tr>
        <tr>
            <td>tiff</td>
            <td>458 KB (469,816 字节)</td>
            <td>100%</td>
        </tr>
    </tbody>
</table>


</font>

<p><br></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>bmp格式经过在线图像压缩器<a href="https://onlineconvertfree.com/zh/compress-image/">onlineconvertfree</a>转换为不同格式（jpg、png、tiff）后分辨率并没有明显变化，对比属性结果如下：</p>
<p><br></p>
<p><img src="/2020/09/26/h4/cmp2.png" alt srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/2020/09/26/h4/cmp2.png" class="lozad post-image"></p>
<p><br></p>
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>经过比较发现分辨率区别不是很大，但图片占用空间发生了变化   </p>
<pre><code>bmp &gt; tiff &gt; png &gt; jpg
</code></pre><p><br></p>
<p>   1) Winrar压缩文件是lossless, or lossy 方法？<br>    <font color="orange">winrar是无损压缩，lossless</font></p>
<p><br></p>
]]></content>
      <categories>
        <category>homework</category>
      </categories>
  </entry>
  <entry>
    <title>Construct3制作射击小游戏（新手向）</title>
    <url>/2020/10/04/test2/</url>
    <content><![CDATA[<h1 id="Construct3制作射击小游戏（新手向）"><a href="#Construct3制作射击小游戏（新手向）" class="headerlink" title="Construct3制作射击小游戏（新手向）"></a>Construct3制作射击小游戏（新手向）</h1><p>本教程将指导初学者制作一个简易的射击小游戏</p>
<p><br></p>
<h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><p><br></p>
<p>首先访问Construct3平台，点击相关链接<a href="https://editor.construct.net/">editor.construct.net</a>，即可在浏览器在线制作属于自己的小游戏，并不需要安装或设置相关文件，非常方便。</p>
<p><br></p>
<h3 id="创建新项目"><a href="#创建新项目" class="headerlink" title="创建新项目"></a>创建新项目</h3><p><br></p>
<p>单击<font color="orange">new project</font>按钮,之后将出现对话框，直接点击<font color="orange">create</font>创建新项目即可，然后可以看到类似下面的新建项目。<br><img src="/2020/10/04/test2/1.png" alt srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/2020/10/04/test2/1.png" class="lozad post-image"><br><img src="/2020/10/04/test2/2.png" alt srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/2020/10/04/test2/2.png" class="lozad post-image"></p>
<p><br></p>
<h2 id="添加对象"><a href="#添加对象" class="headerlink" title="添加对象"></a>添加对象</h2><p><br></p>
<p>接下来添加游戏所需要的对象</p>
<p><br></p>
<h3 id="添加背景"><a href="#添加背景" class="headerlink" title="添加背景"></a>添加背景</h3><p><br></p>
<p>双击或右键点击空白处选择<font color="orange">insert new object</font>,找到<font color="orange">Tiled Baekground</font>后双击。<br><img src="/2020/10/04/test2/3.png" alt srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/2020/10/04/test2/3.png" class="lozad post-image"><br>此时鼠标会指向十字线，代表图像将要放置的位置，单击布局中间某处，打开图像编辑器。可以选择自己画背景或从文件中导入图片作为游戏的背景。关掉编辑器即可看到自己的背景图，然后右键点击<font color="orange">Align</font>选择<font color="orange">Cover Layout</font>即可将背景平铺到空白处。<br><img src="/2020/10/04/test2/4.png" alt srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/2020/10/04/test2/4.png" class="lozad post-image"><br>为了防止之后添加图像挪动背景，可以选择将背景<font color="orange">Lock</font>，右键单击可以看到相关选项。</p>
<p><br></p>
<h3 id="添加输入对象"><a href="#添加输入对象" class="headerlink" title="添加输入对象"></a>添加输入对象</h3><p><br></p>
<p>双击或右键打开菜单栏<font color="orange">insert new object</font>添加输入对象<font color="orange">Mouse</font>或<font color="orange">Keyboard</font>，以确保游戏接受鼠标或键盘输入。</p>
<p><br></p>
<h3 id="添加游戏对象"><a href="#添加游戏对象" class="headerlink" title="添加游戏对象"></a>添加游戏对象</h3><p><br></p>
<p>按照类似添加背景的方式添加游戏对象：玩家、子弹、精灵以及爆炸图象。双击或右键打开菜单栏添加<font color="orange">Sprites</font>,并且分别为图像进行命名防止混淆。</p>
<p><br></p>
<h2 id="添加行为"><a href="#添加行为" class="headerlink" title="添加行为"></a>添加行为</h2><p><br></p>
<p>为玩家、子弹、精灵等对象添加行为以让他们按照我们想要的方式进行活动，平台提供的行为有多种选择</p>
<p><img src="/2020/10/04/test2/5.png" alt srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/2020/10/04/test2/5.png" class="lozad post-image"><br><img src="/2020/10/04/test2/6.png" alt srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/2020/10/04/test2/6.png" class="lozad post-image"><br>单击对象，找到左边的菜单<font color="orange">Behaviors</font>添加行为的方式如下图所示<br><img src="/2020/10/04/test2/7.png" alt srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/2020/10/04/test2/7.png" class="lozad post-image"><br><pre class="highlight"><span class="line">玩家行为：8 direction(8方向移动)、ScorllTo（将镜头聚焦到玩家身上）、BoundToLayout（将玩家的活动范围固定防止移动到背景外）</span><br><span class="line"></span><br><span class="line">子弹行为：Bullet（子弹运动）、Destroy outside layout（销毁子弹防止移动到背景外）</span><br><span class="line"></span><br><span class="line">爆炸行为：Fade（爆炸对象出现时采用淡入淡出的动画形式）</span><br><span class="line"></span><br><span class="line">精灵行为：Bullet（方便系统控制精灵行为）</span><br></pre></p>
<p><br></p>
<h2 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h2><p><br></p>
<p>首先，单击顶部的选项卡<font color="orange">Event sheet1</font>以切换到”事件工作表视图”。事件列表称为事件表 ，你可以为游戏的不同部分或组织使用不同的事件表。</p>
<p><br></p>
<h3 id="玩家活动"><a href="#玩家活动" class="headerlink" title="玩家活动"></a>玩家活动</h3><p><br></p>
<p>让玩家按照你所想要的方式活动，例如让玩家视野跟随鼠标，事件如图：<br><img src="/2020/10/04/test2/9.png" alt srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/2020/10/04/test2/9.png" class="lozad post-image"><br>具体操作过程如下：<br><img src="/2020/10/04/test2/10.png" alt srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/2020/10/04/test2/10.png" class="lozad post-image"><br><img src="/2020/10/04/test2/11.png" alt srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/2020/10/04/test2/11.png" class="lozad post-image"><br><img src="/2020/10/04/test2/12.png" alt srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/2020/10/04/test2/12.png" class="lozad post-image"><br><img src="/2020/10/04/test2/13.png" alt srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/2020/10/04/test2/13.png" class="lozad post-image"><br><img src="/2020/10/04/test2/14.png" alt srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/2020/10/04/test2/14.png" class="lozad post-image"></p>
<p>让玩家能够发射子弹，事件如下：<br><img src="/2020/10/04/test2/15.png" alt srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/2020/10/04/test2/15.png" class="lozad post-image"><br>按照所述相关路径执行操作即可，这些不过多叙述。</p>
<p><br></p>
<h3 id="子弹活动"><a href="#子弹活动" class="headerlink" title="子弹活动"></a>子弹活动</h3><p><br></p>
<p><img src="/2020/10/04/test2/16.png" alt srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/2020/10/04/test2/16.png" class="lozad post-image"></p>
<p><br></p>
<h3 id="精灵活动"><a href="#精灵活动" class="headerlink" title="精灵活动"></a>精灵活动</h3><p><br></p>
<p><img src="/2020/10/04/test2/17.png" alt srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/2020/10/04/test2/17.png" class="lozad post-image"></p>
<p><br></p>
<h3 id="使用实例变量"><a href="#使用实例变量" class="headerlink" title="使用实例变量"></a>使用实例变量</h3><p><br></p>
<p>实例变量允许不同的对象拥有属于自己的属性，变量是可以更改的。我们可以对精灵添加一个实例变量<font color="orange">health</font>来让精灵拥有更长的生命值，而不是子弹一碰就发生爆炸。添加过程如图：<br><img src="/2020/10/04/test2/18.png" alt srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/2020/10/04/test2/18.png" class="lozad post-image"><br><img src="/2020/10/04/test2/19.png" alt srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/2020/10/04/test2/19.png" class="lozad post-image"><br>我们可以设置条件，当子弹击中精灵时，扣除一定健康值，为游戏体验增加趣味性。将原来的事件进行修改如下：<br><img src="/2020/10/04/test2/20.png" alt srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/2020/10/04/test2/20.png" class="lozad post-image"><br><img src="/2020/10/04/test2/21.png" alt srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/2020/10/04/test2/21.png" class="lozad post-image"><br>此时精灵经受多次射击才会发生爆炸。</p>
<p><br></p>
<h3 id="使用全局变量"><a href="#使用全局变量" class="headerlink" title="使用全局变量"></a>使用全局变量</h3><p><br></p>
<p>为了显示我们游戏的分数，需要一个全局变量来显示。右键单击事件工作表底部的空间，选择全局变量。<br><img src="/2020/10/04/test2/22.png" alt srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/2020/10/04/test2/22.png" class="lozad post-image"><br><img src="/2020/10/04/test2/23.png" alt srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/2020/10/04/test2/23.png" class="lozad post-image"><br>修改之前的事件<br><img src="/2020/10/04/test2/24.png" alt srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/2020/10/04/test2/24.png" class="lozad post-image"><br>然后我们需要添加信新图层，用来显示我们的游戏分数。找到屏幕右下角的图层栏：<br><img src="/2020/10/04/test2/26.png" alt srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/2020/10/04/test2/26.png" class="lozad post-image"><br>右键单击选择<font color="orange">Add layer at top</font>,将名称改为<font color="orange">HUD</font>,然后在HUD的属性栏修改<font color="orange">Parallax</font>。<br><img src="/2020/10/04/test2/27.png" alt srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/2020/10/04/test2/27.png" class="lozad post-image"><br>之后我们需要添加一个文本对象，使用顶部的选项卡切换回布局视图，双击空白处添加文本对象<font color="orange">Text</font>,并将它放在左上角，你可以在它的属性栏里修改它的颜色，大小和位置等。<br><img src="/2020/10/04/test2/28.png" alt srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/2020/10/04/test2/28.png" class="lozad post-image"><br>最后回到工作事件表，添加事件：<br><img src="/2020/10/04/test2/30.png" alt srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/2020/10/04/test2/30.png" class="lozad post-image"></p>
<p><br></p>
<h3 id="自动生成精灵"><a href="#自动生成精灵" class="headerlink" title="自动生成精灵"></a>自动生成精灵</h3><p><br></p>
<p>为了让精灵持续出现，我们需要添加如下事件，让系统自动产生精灵。<br><img src="/2020/10/04/test2/29.png" alt srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/2020/10/04/test2/29.png" class="lozad post-image"></p>
<p><br></p>
<h3 id="游戏结束条件"><a href="#游戏结束条件" class="headerlink" title="游戏结束条件"></a>游戏结束条件</h3><p><br></p>
<p>此时，我们发现玩家是不会自动触发游戏结束的条件，所以我们还要添加事件，让玩家在碰到精灵时游戏结束，添加如下条件：<br><img src="/2020/10/04/test2/31.png" alt srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/2020/10/04/test2/31.png" class="lozad post-image"></p>
<p><br></p>
<p>至此，我们的游戏算是初步完成了，除了上面的事件外，我们还可以继续完善它，例如添加不同的精灵，让精灵随着时间逐渐加速、达到触发条件增加子弹数量等等。</p>
<p><br></p>
<h2 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h2><p><br></p>
<p>下面附上我的游戏链接和相关游戏视频：<br>游戏链接：<a href="https://www.construct.net/en/free-online-games/shooter-18244/play">shooter</a>  </p>
<p>视频链接：<a href="https://www.bilibili.com/video/BV1Ny4y1C7pR">shooter体验视频</a></p>
]]></content>
      <categories>
        <category>homework</category>
      </categories>
  </entry>
  <entry>
    <title>第5周作业</title>
    <url>/2020/10/07/h5/</url>
    <content><![CDATA[<h1 id="第5周作业"><a href="#第5周作业" class="headerlink" title="第5周作业"></a>第5周作业</h1><p><br></p>
<p><img src="/2020/10/07/h5/1.png" width="70%" srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/2020/10/07/h5/1.png" class="lozad post-image"></p>
<h2 id="Part-1"><a href="#Part-1" class="headerlink" title="Part 1"></a>Part 1</h2><p><br></p>
<ol>
<li>与门的三种表现形式：<br><img src="/2020/10/07/h5/4.png" width="50%" srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/2020/10/07/h5/4.png" class="lozad post-image"><br>与门是实现逻辑“乘”运算的电路，只有当所有输入端都是高电平（逻辑1）时，输出才为高电平。</li>
<li>异或门的三种表现形式<br><img src="/2020/10/07/h5/5.png" width="50%" srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/2020/10/07/h5/5.png" class="lozad post-image"><br>异或门是实现逻辑异或的逻辑门，只有当输入的两个电平相异，输出才为高电平。</li>
<li>(A + B)(B + C)电路逻辑图如图<br><img src="/2020/10/07/h5/10.png" width="30%" srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/2020/10/07/h5/10.png" class="lozad post-image"></li>
<li>真值表如下：<br><img src="/2020/10/07/h5/8.png" width="50%" srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/2020/10/07/h5/8.png" class="lozad post-image">    </li>
<li>真值表如下：<br><img src="/2020/10/07/h5/9.png" width="50%" srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/2020/10/07/h5/9.png" class="lozad post-image"><br>通过真值表可以知道该逻辑表达式逻辑等价<br><br></li>
</ol>
<p><img src="/2020/10/07/h5/2.png" width="70%" srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/2020/10/07/h5/2.png" class="lozad post-image"></p>
<h2 id="Part-2"><a href="#Part-2" class="headerlink" title="Part 2"></a>Part 2</h2><p><br></p>
<ol>
<li>电路图如下：<br><img src="/2020/10/07/h5/7.png" width="60%" srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/2020/10/07/h5/7.png" class="lozad post-image"></li>
<li>Fill the follow expression<br>(1) $(X_8X_7X_6X_51111)_2$<br>(2) $(X_8X_7X_6X_5X_4’X_3’X_2’X_1’)_2$<br>(3) $(X_8X_7X_6X_5X_4’X_3’X_2’X_1’)_2$</li>
</ol>
<p><img src="/2020/10/07/h5/3.png" width="70%" srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/2020/10/07/h5/3.png" class="lozad post-image"></p>
<h2 id="Part-3"><a href="#Part-3" class="headerlink" title="Part 3"></a>Part 3</h2><p><br></p>
<h3 id="概念解释"><a href="#概念解释" class="headerlink" title="概念解释"></a>概念解释</h3><ol>
<li><font color="orange">Logic gate</font> : A logic gate is an idealized or physical electronic device implementing a Boolean function, a logical operation performed on one or more binary inputs that produces a single binary output.    </li>
<li><font color="orange">Boolean algebra</font> : In mathematics and mathematical logic, Boolean algebra is the branch of algebra in which the values of the variables are the truth values true and false, usually denoted 1 and 0, respectively.   </li>
</ol>
<h3 id="存储电路"><a href="#存储电路" class="headerlink" title="存储电路"></a>存储电路</h3><ol>
<li><font color="orange">Flip-flop</font>中文翻译：触发器</li>
<li>SR触发器只存储一个位信息0或1</li>
</ol>
]]></content>
      <categories>
        <category>homework</category>
      </categories>
  </entry>
  <entry>
    <title>用电路做加法</title>
    <url>/2020/10/14/h6/</url>
    <content><![CDATA[<h2 id="任务1：建立一个简单电路"><a href="#任务1：建立一个简单电路" class="headerlink" title="任务1：建立一个简单电路"></a>任务1：建立一个简单电路</h2><p><br></p>
<ol>
<li>设计与门逻辑电路<ol>
<li>与门有多个输入，通过单刀双闸开关切换电路的不同输入状态</li>
<li>为直观显示与门的输出，连接小灯泡观察亮灭以推测与门输出状态   </li>
<li>设计电路后将相关元件连接</li>
<li>对电路的输入输出进行测试，测试结果如图<br><img src="/2020/10/14/h6/1.png" width="30%" srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/2020/10/14/h6/1.png" class="lozad post-image"><img src="/2020/10/14/h6/2.png" width="30%" srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/2020/10/14/h6/2.png" class="lozad post-image"><br><img src="/2020/10/14/h6/3.png" width="30%" srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/2020/10/14/h6/3.png" class="lozad post-image"><img src="/2020/10/14/h6/4.png" width="30%" srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/2020/10/14/h6/4.png" class="lozad post-image"></li>
</ol>
</li>
<li>真值表验证与门功能<br><img src="/2020/10/14/h6/5.png" width="30%" srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/2020/10/14/h6/5.png" class="lozad post-image"></li>
<li>选做题<ol>
<li>如何用XOR门作非门？<font color="orange">将与非门的两个输入用导线相连</font><br><img src="/2020/10/14/h6/6.png" width="20%" srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/2020/10/14/h6/6.png" class="lozad post-image"><br><br></li>
</ol>
</li>
</ol>
<h2 id="任务2：验证电路等价"><a href="#任务2：验证电路等价" class="headerlink" title="任务2：验证电路等价"></a>任务2：验证电路等价</h2><p><br></p>
<ol>
<li>分别建立电路A(B+C)和AB+AC在一个界面上。用A,B,C用三个开关控制输入，用两个LED表示输出<ol>
<li>分析后知道两者输入相同，故用三个电源与单刀双闸开关相连接，分别代表A，B，C三个输入信号</li>
<li>电路A(B+C)和AB+AC的输出分别用两个独立的LED灯显示，将两者并联接入电路。</li>
<li>按照电路设计将元件相连接</li>
<li>测试结果如图：<br><img src="/2020/10/14/h6/8.png" width="30%" srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/2020/10/14/h6/8.png" class="lozad post-image"><img src="/2020/10/14/h6/9.png" width="30%" srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/2020/10/14/h6/9.png" class="lozad post-image"><img src="/2020/10/14/h6/10.png" width="30%" srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/2020/10/14/h6/10.png" class="lozad post-image"><img src="/2020/10/14/h6/11.png" width="30%" srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/2020/10/14/h6/11.png" class="lozad post-image"><img src="/2020/10/14/h6/12.png" width="30%" srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/2020/10/14/h6/12.png" class="lozad post-image"><img src="/2020/10/14/h6/13.png" width="30%" srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/2020/10/14/h6/13.png" class="lozad post-image"><img src="/2020/10/14/h6/14.png" width="30%" srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/2020/10/14/h6/14.png" class="lozad post-image"><img src="/2020/10/14/h6/15.png" width="30%" srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/2020/10/14/h6/15.png" class="lozad post-image"></li>
</ol>
</li>
<li>枚举所有可能输入，用真值表记录<br><img src="/2020/10/14/h6/7.png" width="20%" srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/2020/10/14/h6/7.png" class="lozad post-image"><br><br></li>
</ol>
<h2 id="任务3：理解存储电路"><a href="#任务3：理解存储电路" class="headerlink" title="任务3：理解存储电路"></a>任务3：理解存储电路</h2><p><br></p>
<ol>
<li>搭建S-Rlatch电路：<br><img src="/2020/10/14/h6/16.png" width="30%" srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/2020/10/14/h6/16.png" class="lozad post-image"><img src="/2020/10/14/h6/17.png" width="30%" srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/2020/10/14/h6/17.png" class="lozad post-image"><img src="/2020/10/14/h6/18.png" width="30%" srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/2020/10/14/h6/18.png" class="lozad post-image"><img src="/2020/10/14/h6/19.png" width="30%" srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/2020/10/14/h6/19.png" class="lozad post-image"><img src="/2020/10/14/h6/20.png" width="30%" srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/2020/10/14/h6/20.png" class="lozad post-image"></li>
<li>顺序按Set、Reset，结果如下：<br><img src="/2020/10/14/h6/21.png" width="40%" srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/2020/10/14/h6/21.png" class="lozad post-image"><br><br></li>
</ol>
<h2 id="任务4：设计全加器"><a href="#任务4：设计全加器" class="headerlink" title="任务4：设计全加器"></a>任务4：设计全加器</h2><p><br></p>
<ol>
<li>画出一位的全加电路<br><img src="/2020/10/14/h6/22.png" width="50%" srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/2020/10/14/h6/22.png" class="lozad post-image"></li>
<li>画出二位的全加电路<br><img src="/2020/10/14/h6/23.png" width="50%" srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="/2020/10/14/h6/23.png" class="lozad post-image"><br><br></li>
</ol>
]]></content>
      <categories>
        <category>homework</category>
      </categories>
  </entry>
  <entry>
    <title>Homework of PPT6 and PPT7</title>
    <url>/2020/10/14/h6(2)/</url>
    <content><![CDATA[<!-- <script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML"></script>
<script type="text/x-mathjax-config">
    MathJax.Hub.Config({ tex2jax: {inlineMath: [['$', '$']]}, messageStyle: "none" });
</script> -->
<h2 id="Homework-of-PPT6"><a href="#Homework-of-PPT6" class="headerlink" title="Homework of PPT6"></a>Homework of PPT6</h2><p><br></p>
<ol>
<li><p>According to the von Neumann architecture, List basic parts of a computer:   </p>
<font color="orange">
运算器、控制器、存储器、输入设备、输出设备 
</font>   
</li>
<li><p>A computer has 64 MB (megabytes) of memory. How many bits are needed to address any single byte in memory?     </p>
<font color="orange">
字长为4字节，主存容量为64MB/4=16M字，16M=$2^4*2^{20}$故存储器中对单个字节寻址共需要24位地址
</font>    
</li>
<li><p>List basic parts of a CPU, include cache or not?    </p>
<font color="orange">
CPU的基本组成部分是控制器和运算器，不包括高速缓冲存储器（Cache）。高速缓存存储器的主要作用是加快数据存取速度，从而加快CPU的运行速度；它是位于CPU与内存之间的临时存储器，它的容量比内存小但交换速度比内存快。
目前高速缓存器也制作在CPU芯片内。
</font>     
</li>
<li><p>What mean secondary storage. List some on your PC.    </p>
<font color="orange">
辅助存储器一般指外存储器，是指除计算机内存及CPU缓存以外的储存器，此类储存器一般断电后仍然能保存数据。常见的外存储器有硬盘、软盘、光盘、U盘等。
</font>     
</li>
<li><p>使用维基百科，解释以下概念</p>
<ol>
<li><p><font color="orange">CPU</font> : A central processing unit (CPU), also called a central processor, main processor or just processor, is the electronic circuitry within a computer that executes instructions that make up a computer program.    </p>
</li>
<li><p><font color="orange">RAM</font> : Random-access memory (RAM /ræm/) is a form of computer memory that can be read and changed in any order, typically used to store working data and machine code.     </p>
</li>
<li><p><font color="orange">ROM</font> : Read-only memory (ROM) is a type of non-volatile memory used in computers and other electronic devices.      </p>
</li>
<li><p><font color="orange">Bus(computing)</font> : In computer architecture, a bus[1] (a contraction of the Latin omnibus[citation needed], and historically also called data highway[2]) is a communication system that transfers data between components inside a computer, or between computers.    </p>
</li>
<li><p><font color="orange">Parallel Computing</font> : Parallel computing is a type of computation where many calculations or the execution of processes are carried out simultaneously.     </p>
</li>
</ol>
</li>
<li><p>简单解释“云计算（Cloud Computing）”       </p>
<font color="orange">
云计算（cloud computing）是分布式计算的一种，指的是通过网络“云”将巨大的数据计算处理程序分解成无数个小程序，然后，通过多部服务器组成的系统进行处理和分析这些小程序得到结果并返回给用户。</font>    


</li>
</ol>
<ol>
<li>小孙买了计算机主板，说明书表明“支持双通道DDR3-1333内存，<br>最大支持16G”<ol>
<li>DDR3-1333内存,”3”和”1333”的含义： <font color="orange">
DDR3是指三代内存，1333是指默认工作频率是1333MHz</font></li>
<li>小孙买8G DDR3-1600的内存是否能提高性能：<font color="orange">
能
</font></li>
<li>小孙买4G*2 DDR3-1333的内存能否提高性能：<font color="orange">
能
</font></li>
<li>16G需要多少位地址?<br><font color="orange"><br>16G = $2^4*2^30$,需要34位地址
</font><br><br> </li>
</ol>
</li>
</ol>
<h2 id="Homework-of-PPT7"><a href="#Homework-of-PPT7" class="headerlink" title="Homework of PPT7"></a>Homework of PPT7</h2><p><br></p>
<ol>
<li><p>Program with machine language according to the following c</p>
<pre class="highlight"><span class="line">int_8 a = <span class="number">1</span>;</span><br><span class="line">int_8 c = a + <span class="number">3</span>;</span><br></pre>
<ol>
<li>Write your assembly code &amp; machine code : <pre class="highlight"><span class="line">汇编代码</span><br><span class="line">LOD #1</span><br><span class="line">STO a </span><br><span class="line">LOD a</span><br><span class="line">STO c</span><br><span class="line">LOD c</span><br><span class="line">add #3</span><br><span class="line">STO c</span><br></pre>
<pre class="highlight"><span class="line">机器代码</span><br><span class="line">00010100 00000001</span><br><span class="line">00000101 00000000</span><br><span class="line">00000100 00000000</span><br><span class="line">00000101 00100000</span><br><span class="line">00000100 00100000</span><br><span class="line">00010000 00000011</span><br><span class="line">00000101 00100000</span><br></pre></li>
<li><p>Explain machine code execution with the fetch-decode-execute cycle : </p>
<pre class="highlight"><span class="line">机器周期的四个阶段通常分为两类：指令周期和执行周期。</span><br><span class="line">指令周期：</span><br><span class="line">1.提取：CPU根据PC生成存储器请求，从存储器中读取指令。</span><br><span class="line">2.解码：由指令解码器解码，将指令分解为不同的部分，以便在被CPU处理前可以容易理解它。</span><br><span class="line">执行周期：</span><br><span class="line">3.执行：处理当前获取的指令，识别指令格式所定义的操作码。</span><br><span class="line">4.存放：执行阶段计算出的结果将发送到内存或输出设备，PC更新以指向下一条指令。</span><br></pre>
</li>
<li><p>Explain functions about IR, PC, ACC registers in a CPU : </p>
<pre class="highlight"><span class="line">IR（instruction register）用于暂存当前正在执行的指令</span><br><span class="line">PC（program counter）用来表示指令在主存中的地址</span><br><span class="line">ACC（accumulator）累加器，用来存放操作数或运算结果</span><br></pre></li>
<li>Explain physical meaning about vars a &amp; c in a machine :      <pre class="highlight"><span class="line">a与c按位求与</span><br></pre></li>
</ol>
</li>
<li>简答题<ol>
<li>What are stored in memory?<font color="orange">
内存里面存储的是操作系统和正在运行的应用程序需要的指令和数据。
</font></li>
<li>Can a data or a instruction stored in the same place?   <font color="orange">
数据和指令可以放在同一存储器
</font> </li>
<li>Explain Instruction Format with example instructions.<font color="orange">
指令格式通常包括操作码和地址码，地址码的作用有指出操作数的地址、给出结果存放的地址和指出下一条指令的地址。例如四地址指令(参照MIPS指令的R格式指令):
</font>

</li>
</ol>
</li>
</ol>
<!-- <style>
table {
margin: auto;
}
</style> -->
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">op</th>
<th style="text-align:center">rs</th>
<th style="text-align:center">rt</th>
<th style="text-align:center">rd</th>
<th style="text-align:center">shamt</th>
<th style="text-align:center">funct</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"></td>
</tr>
</tbody>
</table>
</div>
<font color="orange">
    OP是操作码，rs和rt是第一操作数和第二操作数,rd存放存放运算结果的地址，shamt是移位数，funct是扩展操作码。
</font>


<ol>
<li>解释词汇<ol>
<li><font color="orange">汇编语言(Assembly Language)</font> : In computer programming, assembly language (or assembler language),[1] often abbreviated asm, is any low-level programming language in which there is a very strong correspondence between the instructions in the language and the architecture’s machine code instructions.</li>
<li><font color="orange">编译(Compiler)</font> : In computing, a compiler is a computer program that translates computer code written in one programming language (the source language) into another language (the target language).</li>
<li><font color="orange">命令式语言(Imperative programming)</font> : In computer science, imperative programming is a programming paradigm that uses statements that change a program’s state. </li>
<li><font color="orange">函数编程语言(Functional programming)</font> :  In computer science, functional programming is a programming paradigm where programs are constructed by applying and composing functions.</li>
<li><font color="orange">过程式编程(Procedural programming)</font> : Procedural programming is a programming paradigm, derived from structured programming, based on the concept of the procedure call.<br><br></li>
</ol>
</li>
</ol>
]]></content>
      <categories>
        <category>homework</category>
      </categories>
  </entry>
  <entry>
    <title>硬件编程——机器指令编程</title>
    <url>/2020/11/01/h7/</url>
    <content><![CDATA[<h1 id="实验报告"><a href="#实验报告" class="headerlink" title="实验报告"></a>实验报告</h1><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">实验名称</th>
<th style="text-align:center">姓名</th>
<th style="text-align:center">学号</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">机器指令编程</td>
<td style="text-align:center">莫振威</td>
<td style="text-align:center">19335158</td>
</tr>
</tbody>
</table>
</div>
<h2 id="实验目标"><a href="#实验目标" class="headerlink" title="实验目标"></a>实验目标</h2><ol>
<li>理解冯·诺依曼计算机的结构</li>
<li>理解机器指令的构成</li>
<li>理解机器指令执行周期</li>
<li>用汇编编写简单程序</li>
</ol>
<h2 id="实验环境"><a href="#实验环境" class="headerlink" title="实验环境"></a>实验环境</h2><ul>
<li>Windows7或以下,浏览器IE8或以下，Java RuntimeEnvironment1.6（JRE6.0）或以下</li>
</ul>
<h2 id="实验步骤与结果"><a href="#实验步骤与结果" class="headerlink" title="实验步骤与结果"></a>实验步骤与结果</h2><p>启动Win7，使用IE8访问上述网址<a href="http://www.science.smith.edu/~jcardell/Courses/CSC103/CPUsim/cpusim.html">http://www.science.smith.edu/~jcardell/Courses/CSC103/CPUsim/cpusim.html</a>,运行cpusim如下：<br><img src="https://pic.imgdb.cn/item/5f9e1de81cd1bbb86bf44951.jpg" width="50%" srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="https://pic.imgdb.cn/item/5f9e1de81cd1bbb86bf44951.jpg" class="lozad post-image"><img src="https://pic.imgdb.cn/item/5f9e1e0b1cd1bbb86bf45348.jpg" width="50%" srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="https://pic.imgdb.cn/item/5f9e1e0b1cd1bbb86bf45348.jpg" class="lozad post-image"></p>
<h3 id="任务1-：简单程序"><a href="#任务1-：简单程序" class="headerlink" title="任务1 ：简单程序"></a>任务1 ：简单程序</h3><ol>
<li>打开网页 <a href>The PIPPIN User’s Guide</a>,然后输入 Program 1：Add 2 number</li>
<li><p>点击step after step，观察并回答下列问题：<br><img src="https://pic.imgdb.cn/item/5f9e2cfd1cd1bbb86bf775c5.jpg" width="50%" srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="https://pic.imgdb.cn/item/5f9e2cfd1cd1bbb86bf775c5.jpg" class="lozad post-image">  </p>
<ol>
<li><p>PC、IR寄存器的作用：   </p>
<font color="orange">PC寄存器负责储存内存地址，该地址指向下一条即将执行的指令，每解释执行完一条指令，pc寄存器的值就会自动被更新为下一条指令的地址   
IR寄存器用来保存当前正在执行的一条指令。当执行一条指令时，先把它从内存取到数据寄存器（DR）中，然后再传送至IR</font>   
</li>
<li><p>ACC寄存器的全称和作用：   </p>
<font color="orange">ACC寄存器全称是累加器（Accumulator），是一个具有特殊用途的二进制8位寄存器，专门用来存放操作数或运算结果。</font>
</li>
<li><p>用“LOD #3”指令的执行过程，解释Fetch-Execute周期：   </p>
<font color="orange">通过PC寄存器获取下一条指令的地址，然后从存储器中取出对应指令放入IR寄存器中，IR寄存器将指令送去解码转换成机械码，识别操作数LOD，ALU运算单元进行运算，执行LOD指令，再把运算结果存放到ACC寄存器中，最后PC移到下一条指令地址</font>

<ol>
<li><p>用“ADD W”指令的执行过程，解释Fetch-Execute周期：   </p>
<font color="orange">通过PC寄存器获取下一条指令的地址，然后从存储器中取出对应指令放入IR寄存器中，IR寄存器将指令送去解码转换成机械码，识别操作数ADD，ALU运算单元进行运算，执行LOD指令，再把运算结果存放到ACC寄存器中，最后PC移到下一条指令地址</font>
</li>
<li><p>“LOD #3” 与 “ADD W” 指令的执行在Fetch-Execute周期级别，有什么不同：       </p>
<font color="orange">LOD为单操作数指令，只需经过存储器一次取指令，ADD为双操作数指令，需要经过存储器两次取指令和操作数</font>
</li>
</ol>
</li>
</ol>
</li>
<li><p>点击“Binary”,观察回答下面问题<br><img src="https://pic.imgdb.cn/item/5f9e2d951cd1bbb86bf793d5.jpg" width="50%" srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="https://pic.imgdb.cn/item/5f9e2d951cd1bbb86bf793d5.jpg" class="lozad post-image"></p>
<ol>
<li><p>写出指令 “LOD #7” 的二进制形式，按指令结构，解释每部分的含义。   </p>
<font color="orange">二进制形式：000 1 0100 00000111   
含义：1-3位固定为0，4位为模式选择，1表示立即数，5-8位为指令内容，0100代表LOD指令，9-16为地址或立即数，00000111是立即数7。</font>
</li>
<li><p>解释 RAM 的地址。   </p>
<font color="orange">RAM的地址一般用十六进制表示，编号从0开始，每位地址可以存放八个二进制数字。</font>
</li>
<li><p>该机器CPU是几位的？（按累加器的位数）<font color="orange">8位</font></p>
</li>
<li><p>写出该程序对应的 C语言表达。</p>
<pre class="highlight"><span class="line"><span class="keyword">int</span> w = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">int</span> x = <span class="number">7</span>;</span><br><span class="line"><span class="keyword">int</span> y = x + w;</span><br></pre>
</li>
</ol>
</li>
</ol>
<h3 id="任务2：简单循环"><a href="#任务2：简单循环" class="headerlink" title="任务2：简单循环"></a>任务2：简单循环</h3><ol>
<li>输入程序Program 2，运行并回答问题：<br><img src="https://pic.imgdb.cn/item/5f9e32611cd1bbb86bf879bc.jpg" width="50%" srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="https://pic.imgdb.cn/item/5f9e32611cd1bbb86bf879bc.jpg" class="lozad post-image">   <ol>
<li>用一句话总结程序的功能   <font color="orange">将X初始化为3，每次循环减一到X=0</font></li>
<li>写出对应的 c 语言程序<pre class="highlight"><span class="line"><span class="keyword">int</span> x = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    x--;</span><br><span class="line">&#125; <span class="keyword">while</span>(x != <span class="number">0</span>)</span><br></pre></li>
</ol>
</li>
<li><p>修改该程序，用机器语言实现 10+9+8+..1 ，输出结果存放于内存 Y<br><img src="https://pic.imgdb.cn/item/5f9e33c91cd1bbb86bf8cfad.jpg" width="50%" srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="https://pic.imgdb.cn/item/5f9e33c91cd1bbb86bf8cfad.jpg" class="lozad post-image"></p>
<ol>
<li>写出 c 语言的计算过程<pre class="highlight"><span class="line"><span class="keyword">int</span> x = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> y = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    y += x;</span><br><span class="line">    x--;</span><br><span class="line">&#125; <span class="keyword">while</span>(x != <span class="number">0</span>)</span><br></pre></li>
<li>写出机器语言的计算过程<pre class="highlight"><span class="line">00010100 00001010</span><br><span class="line">00000101 10000001</span><br><span class="line">00010100 00000000</span><br><span class="line">00000101 10000010</span><br><span class="line">00000100 10000001</span><br><span class="line">00000000 10000010</span><br><span class="line">00000101 10000010</span><br><span class="line">00000100 10000001</span><br><span class="line">00010001 00000001</span><br><span class="line">00001101 00011000</span><br><span class="line">00000101 10000001</span><br><span class="line">00001100 00001000</span><br><span class="line">00001111 00000000</span><br></pre></li>
<li><p>用自己的语言，简单总结高级语言与机器语言的区别与联系。   </p>
<ol>
<li><font color="orange">区别：机器语言是计算机最原始的语言，是由0和1的代码构成，cpu在工作的时候只认识机器语言，即0和1的代码。高级语言是在低级语言的基础上，采用接近于人类自然语言的单词和符号来表示一组低级语言程序，使编程变得更加简单，易学，且写出的程序可读性强。</font></li>
<li><font color="orange">联系：高级语言可以编译成机器语言，机器语言也可以用高级语言表述，两者能实现相同的作用。</font>

</li>
</ol>
</li>
</ol>
</li>
</ol>
<h2 id="实验小结"><a href="#实验小结" class="headerlink" title="实验小结"></a>实验小结</h2><ol>
<li>完成了任务1和任务2</li>
<li>进一步理解了冯·诺依曼计算机的结构</li>
<li>熟悉了机器指令的构成和机器指令执行周期</li>
<li>初步掌握用汇编编写简单程序</li>
</ol>
]]></content>
      <categories>
        <category>homework</category>
      </categories>
  </entry>
  <entry>
    <title>Homework of PPT8-1&amp;PPT8-2</title>
    <url>/2020/11/01/h8/</url>
    <content><![CDATA[<h2 id="Homework-of-PPT8-1"><a href="#Homework-of-PPT8-1" class="headerlink" title="Homework of PPT8-1"></a>Homework of PPT8-1</h2><ol>
<li><p>阅读 Pseudocode Standard。 </p>
<p> 1） 用伪代码描述将十进制转换成16进制的方法:</p>
 <pre class="highlight"><span class="line">int num, flag &lt;- 0; &#x2F;*flag是负数标志位*&#x2F;</span><br><span class="line">char hex[maxsize];</span><br><span class="line">if num &lt; 0 then</span><br><span class="line">    flag &lt;- 1；</span><br><span class="line">    num &lt;- -num; &#x2F;*num为负数，将该信息储存*&#x2F;</span><br><span class="line">end if</span><br><span class="line"></span><br><span class="line">do &#123;</span><br><span class="line">    将num%16的值转换为字符hex[i]; &#x2F;*i的范围为[0, maxsize] *&#x2F;</span><br><span class="line">    num &lt;- num%16;</span><br><span class="line">&#125; while(num !&#x3D; 0)</span><br></pre>
<p> 2） C语言实现（先用注释写好算法，然后翻译）</p>
 <pre class="highlight"><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxsize 10</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">toChar</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;  <span class="comment">//将单个数字转化为16进制并且以字符形式返回</span></span><br><span class="line"> <span class="keyword">return</span> n &lt; <span class="number">10</span> ? n + <span class="string">&#x27;0&#x27;</span> : <span class="string">&#x27;A&#x27;</span> + n - <span class="number">10</span>;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">HexToDec</span><span class="params">(<span class="keyword">char</span> * hex, <span class="keyword">int</span> num)</span> </span>&#123; </span><br><span class="line">    <span class="comment">//将10进制的数字（num&gt;0）转化为16进制的字符串，</span></span><br><span class="line"> <span class="keyword">int</span> i = <span class="number">0</span>;						<span class="comment">//并且返回字符串的长度</span></span><br><span class="line"> <span class="keyword">do</span> &#123;</span><br><span class="line">  hex[i] = toChar(num % <span class="number">16</span>);</span><br><span class="line">  num /= <span class="number">16</span>;</span><br><span class="line">  i++;</span><br><span class="line"> &#125; <span class="keyword">while</span>(num != <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"> <span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"> <span class="keyword">int</span> num; </span><br><span class="line"> <span class="keyword">char</span> hex[maxsize];</span><br><span class="line"> <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;num);</span><br><span class="line"></span><br><span class="line"> <span class="keyword">int</span> flag = <span class="number">0</span>; <span class="comment">//用来确定是否为负数的标志位</span></span><br><span class="line"> <span class="keyword">if</span>(num &lt; <span class="number">0</span>) &#123;</span><br><span class="line"> 	flag = <span class="number">1</span>;</span><br><span class="line"> 	num = -num;  <span class="comment">//将num转化为正数进行数制转换</span></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">int</span> size = HexToDec(hex, num);</span><br><span class="line"></span><br><span class="line"> <span class="keyword">for</span>(<span class="keyword">int</span> i = size - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line"> 	<span class="keyword">if</span>(flag == <span class="number">1</span>) &#123;		<span class="comment">//当数字为负数时，将负号输出</span></span><br><span class="line"> 		<span class="built_in">printf</span>(<span class="string">&quot;-&quot;</span>);</span><br><span class="line"> 	&#125;</span><br><span class="line"> 	<span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, hex[i]);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;  </span><br></pre>
<p> 3） 使用 -1, 0, 1, 15, 26，3265 作为输入测试你的程序。<br> 测试结果如下：<br> <img src="https://pic.rmb.bdstatic.com/bjh/9c04a89b98f69fd47e0f730cfdfd9215.png" alt="image.png" title="image.png" srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="https://pic.rmb.bdstatic.com/bjh/9c04a89b98f69fd47e0f730cfdfd9215.png" class="lozad post-image"></p>
</li>
<li><p>名词解释与对比   </p>
<p> 1）<font color="orange"> <em>Top-down design</em></font> : A top-down approach (also known as stepwise design and stepwise refinement and in some cases used as a synonym of decomposition) is essentially the breaking down of a system to gain insight into its compositional sub-systems in a reverse engineering fashion.<br> 2）<font color="orange"><em>Work breakdown structure (WBS)</em></font> : A work-breakdown structure (WBS) in project management and systems engineering, is a deliverable-oriented breakdown of a project into smaller components.<br> 3）简述管理学 WBS 与 信息学Top-down设计 的异同:</p>
<ul>
<li>相同：都是化繁为简，化大为小的设计思路，核心思想都是分解。创建WBS是把项目工作按阶段可交付成果分解成较小的，更易于管理的组成部分的过程。按自顶向下的方法设计时,设计师首先对所设计的系统要有一个全面的理解.然后从顶层开始,连续地逐层向下分解,起到系统的所有模块都小到便于掌握为止。</li>
<li>不同：WBS用于项目管理，top-down用于项目设计</li>
</ul>
</li>
<li><p>、仔细观察您洗衣机的运作过程，运用Top-down设计方法和Pseudocode 描述洗衣机控制程序。假设洗衣机可执行的基本操作如下：</p>
<pre class="highlight"><span class="line">water_in_switch(open_close) &#x2F;&#x2F; open 打开上水开关，close关闭water_out_switch(open_close) &#x2F;&#x2F; open 打开排水开关，close关闭</span><br><span class="line">get_water_volume() &#x2F;&#x2F;返回洗衣机内部水的高度</span><br><span class="line">motor_run(direction) &#x2F;&#x2F; 电机转动。left左转，right右转，stop停</span><br><span class="line">time_counter() &#x2F;&#x2F; 返回当前时间计数，以秒为单位</span><br><span class="line">halt(returncode) &#x2F;&#x2F;停机</span><br><span class="line">success 成功 failure 失败</span><br></pre>
<p> 1）请使用伪代码分解“正常洗衣”程序的大步骤。包括注水、浸泡等   </p>
 <pre class="highlight"><span class="line">water_in_switch(open）</span><br><span class="line">get_water_volume()</span><br><span class="line">water_in_switch(close)</span><br><span class="line">motorrun(left)</span><br><span class="line">motorrun(right)</span><br><span class="line">motorrun(stop)</span><br><span class="line">water_out_switch(open）</span><br><span class="line">get_water_volume()</span><br><span class="line">water_out_switch(close)</span><br></pre>
<p> 2）进一步用基本操作、控制语句（IF、FOR、WHILE等）、变量与表达式，写出每个步骤的伪代码    </p>
 <pre class="highlight"><span class="line">check wrong</span><br><span class="line">if success then</span><br><span class="line">	record time</span><br><span class="line">	water_in_switch(open）</span><br><span class="line">	get_water_volume()</span><br><span class="line"></span><br><span class="line">	if enough then</span><br><span class="line">		timelimit</span><br><span class="line">		water_in_switch(close)</span><br><span class="line">		motorrun(left)</span><br><span class="line">		motorrun(right)</span><br><span class="line">		motorrun(stop)</span><br><span class="line">		water_out_switch    (open）</span><br><span class="line">		get_water_volume()</span><br><span class="line"></span><br><span class="line">		if empty then</span><br><span class="line">			water_out_switch(close)</span><br><span class="line">			return time</span><br><span class="line">			music</span><br><span class="line">        end if </span><br><span class="line">    end if </span><br><span class="line">end if </span><br></pre>
<p> 3）根据你的实践，请分析“正常洗衣”与“快速洗衣”在用户目标和程序上的异同。你认为是否存在改进（创新）空间，简单说明你的改进意见？  </p>
 <font color="orange">
  用户目标：都是通过洗衣机洗衣便利生活。然而，快速洗衣所用时间短于正常洗衣，正常洗衣的清洁程度要优于快速洗衣   
  程序上：两者执行程序步骤形同。然而，两者在程序步骤的时间摊销不同。   
  改进意见：现实生活中，洗衣机存在多种模式，用户也有多种洗衣需求，应增加洗衣模式的多样化选择性。
 </font>

<p> 4）通过步骤3），提取一些共性功能模块（函数），简化“正常洗衣”程序，使程序变得更利于人类理解和修改维护。例如：</p>
 <pre class="highlight"><span class="line">wait(time) &#x2F;&#x2F;等待指定的时间；</span><br><span class="line">注水(volume,timeout) &#x2F;&#x2F;在指定时间内完成注水，否则停机；</span><br><span class="line">排水(timeout)。 等子程序</span><br></pre>
<p> 改进：</p>
 <pre class="highlight"><span class="line">check wrong</span><br><span class="line">if success then</span><br><span class="line">    call 注水(volume,timeout)</span><br><span class="line">    call motorrun()</span><br><span class="line">    call 排水(timeout)</span><br><span class="line">    call 注水(volume，timeout)</span><br><span class="line">    call wait(time)</span><br><span class="line">    call 排水(timeout)</span><br><span class="line">    end if </span><br><span class="line">end if </span><br></pre>
</li>
</ol>
<h2 id="Homework-of-PPT8-2"><a href="#Homework-of-PPT8-2" class="headerlink" title="Homework of PPT8-2"></a>Homework of PPT8-2</h2><p>• 根据后面的素材，识别类和对象。<br>阅读“牧师与恶魔过河”（<a href="http://www.17yy.com/f/69854.html">http://www.17yy.com/f/69854.html</a>) 的游戏介绍并玩游<br>戏。然后回答问题<br>– 游戏涉及哪些类。请列表说明 </p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">类</th>
<th style="text-align:center">人物类</th>
<th style="text-align:center">船类</th>
<th style="text-align:center">背景类</th>
<th style="text-align:center">河岸类</th>
<th style="text-align:center">河类</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"></td>
</tr>
</tbody>
</table>
</div>
<p>– 游戏中有哪些对象，各几个。例如，船（一个）</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">对象</th>
<th style="text-align:center">魔鬼</th>
<th style="text-align:center">牧师</th>
<th style="text-align:center">船</th>
<th style="text-align:center">河</th>
<th style="text-align:center">河岸</th>
<th style="text-align:center">背景</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">数目</td>
<td style="text-align:center">3</td>
<td style="text-align:center">3</td>
<td style="text-align:center">1</td>
<td style="text-align:center">1</td>
<td style="text-align:center">2</td>
<td style="text-align:center">1   </td>
</tr>
</tbody>
</table>
</div>
<p>– 类和对象的区别是什么？举一个例子说明    </p>
<font color="orange">
 例如鼠标是一个类，而小明今天带的那个鼠标是一个对象。   
 对象是对客观事物的抽象，类是对对象的抽象。类是一种抽象的数据类型。它们的关系是，对象是类的实例，类是对象的模板。
</font>    

<p>– 游戏中的魔鬼，有哪些属性和方法？      </p>
<font color="orange">
 属性：身份，位置坐标
 方法：杀死牧师，上船，下船，渡河  
</font>    

<p>– 假设魔鬼被鼠标点中，会执行onclick事件，请用文字（伪代码）描述这个事件中魔鬼与其他对象沟通的过程。    </p>
<pre><code>if(devil is onclick)
    if(devil is on the boat)
        devil disembark
    else
        if the number of people on the boat &lt; 2
        devil board teh ship
</code></pre><p>– 类或对象会是动词吗   </p>
<font color="orange">
类和对象不会是动词。类是现实世界或思维世界中的实体在计算机中的反映，它将数据以及这些数据上的操作封装在一起。现实中的实体用名词表示，而对象是类的实例，因此类和对象都应该用名词表示。
</font>]]></content>
      <categories>
        <category>homework</category>
      </categories>
  </entry>
  <entry>
    <title>Homework of PPT9</title>
    <url>/2020/11/03/h9/</url>
    <content><![CDATA[<ul>
<li>Bubble Sort the list: 33, 56, 17, 8, 95, 22。Make sure the final result is<br>from small to large.<br>Write out the list after the 2nd pass. (10 points)<br>实现程序如下图   <pre class="highlight"><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;malloc.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">list</span> &#123;</span></span><br><span class="line">	<span class="keyword">int</span> value;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">list</span> * <span class="title">next</span>;</span></span><br><span class="line">&#125;<span class="built_in">list</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print_list</span><span class="params">(<span class="built_in">list</span> * L)</span> </span>&#123; <span class="comment">//function to print the list</span></span><br><span class="line">	<span class="built_in">list</span> * temp = L-&gt;next;</span><br><span class="line">	<span class="keyword">while</span>(temp != <span class="literal">NULL</span>) &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, temp-&gt;value);</span><br><span class="line">		temp = temp-&gt;next;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bubble_sort</span><span class="params">(<span class="built_in">list</span> * L)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> count = <span class="number">0</span>;  <span class="comment">//count how many times bubble-sort has run</span></span><br><span class="line">	<span class="keyword">int</span> flag = <span class="number">0</span>;   <span class="comment">//determine wether bubble-sort has finished</span></span><br><span class="line">	<span class="keyword">for</span>(<span class="built_in">list</span> * t1 = L-&gt;next; t1 != <span class="literal">NULL</span>; t1 = t1-&gt;next) &#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="built_in">list</span> * t2 = L-&gt;next; t2-&gt;next != <span class="literal">NULL</span>; t2 = t2-&gt;next) &#123;</span><br><span class="line">			<span class="keyword">if</span>(t2-&gt;value &gt; t2-&gt;next-&gt;value) &#123;</span><br><span class="line">				<span class="keyword">int</span> temp = t2-&gt;value;</span><br><span class="line">				t2-&gt;value = t2-&gt;next-&gt;value;</span><br><span class="line">				t2-&gt;next-&gt;value = temp;</span><br><span class="line">				flag = <span class="number">1</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(flag == <span class="number">0</span>) &#123;</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;the %d: &quot;</span>, ++count);</span><br><span class="line">		print_list(L);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">		flag = <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">list</span> * L = (<span class="built_in">list</span> *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="built_in">list</span>));</span><br><span class="line">	L-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">list</span> * temp = L;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">6</span>; i++) &#123;</span><br><span class="line">		<span class="keyword">int</span> value;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;value);</span><br><span class="line">		<span class="built_in">list</span> * <span class="keyword">new</span> = (<span class="built_in">list</span> *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="built_in">list</span>));</span><br><span class="line">		<span class="keyword">new</span>-&gt;value = value;</span><br><span class="line">		<span class="keyword">new</span>-&gt;next = temp-&gt;next;</span><br><span class="line">		temp-&gt;next = <span class="keyword">new</span>;</span><br><span class="line">		temp = <span class="keyword">new</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	bubble_sort(L);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;the final result: &quot;</span>);</span><br><span class="line">	print_list(L);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//33 56 17 8 95 22</span></span><br><span class="line"></span><br></pre>
最终测试如下图：<br><img src="https://pic.rmb.bdstatic.com/bjh/b628d1be766eca512cc9e1c477771d82.png" alt="image.png" srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="https://pic.rmb.bdstatic.com/bjh/b628d1be766eca512cc9e1c477771d82.png" class="lozad post-image"><br>于是，我们可以看出冒泡排序第二次执行后的链表为：17 8 33 22 56 95</li>
</ul>
<ul>
<li><p>Give a sorted array as list={60,65,75,80,90,95}. Design an algorithm to<br>insert the value of x into the sorted array. Then test the algorithm with<br>value 50,67,99.<br>思考：为什么选择插入点在list头上、中间、尾巴上的三个数作为算<br>法测试的数据，你能解释吗？<br>算法如下</p>
<pre class="highlight"><span class="line">取出第一个节点的值（第零个节点为head指针，里面没有内容）</span><br><span class="line">与要插入的值比较</span><br><span class="line">如果比插入值大，则在链表头执行插入操作</span><br><span class="line">否则，向后查找直到找到比插入值要大的节点，</span><br><span class="line">    若没有找到，则在链表尾执行插入操作</span><br><span class="line">    否则在该节点前一个位置执行插入操作</span><br></pre>
<font color="orange">
选择插入点在list头上、中间、尾巴上的三个数作为算法测试的数据，能够涵盖插入的所有情况，具有代表性
</font>
</li>
<li><p>What is the state of the stack after the following sequence of Push and<br>Pop operations?   </p>
<pre class="highlight"><span class="line">Push “anne”; Push “get”; Push “your” ; Pop; Push “my”; Push “gun”</span><br></pre>
</li>
</ul>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">栈底</th>
<th style="text-align:center">—</th>
<th style="text-align:center">—</th>
<th style="text-align:center">栈顶</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">anne</td>
<td style="text-align:center">get</td>
<td style="text-align:center">my</td>
<td style="text-align:center">gun </td>
</tr>
</tbody>
</table>
</div>
]]></content>
      <categories>
        <category>homework</category>
      </categories>
  </entry>
  <entry>
    <title>Python交互式编程</title>
    <url>/2020/11/22/py/</url>
    <content><![CDATA[<h1 id="用python做计算器做数学题"><a href="#用python做计算器做数学题" class="headerlink" title="用python做计算器做数学题"></a>用python做计算器做数学题</h1><h2 id="实验目的"><a href="#实验目的" class="headerlink" title="实验目的"></a>实验目的</h2><ol>
<li>了解一种“解释型”语言python</li>
<li>使用python做一些简单的科学计算</li>
</ol>
<h2 id="实验环境"><a href="#实验环境" class="headerlink" title="实验环境"></a>实验环境</h2><ul>
<li>编程工具：python Anaconda</li>
<li>操作系统：Windows10 </li>
</ul>
<h2 id="实验内容"><a href="#实验内容" class="headerlink" title="实验内容"></a>实验内容</h2><p>使用python求解</p>
<ol>
<li>选择2个高等数学上的作业，如泰勒分解、公式化简、解方程等</li>
<li>选择2个线性代数上的作业，如求dot、逆矩阵等</li>
</ol>
<h2 id="实验设计"><a href="#实验设计" class="headerlink" title="实验设计"></a>实验设计</h2><ol>
<li><p>使用python求解高等数学题目</p>
<ol>
<li><p>求不定积分：$\int{x^3lnx}\,{\rm d}x$</p>
<pre class="highlight"><span class="line">(D:\Anaconda3-5.2) C:\Users\lenovo&gt;python</span><br><span class="line">&gt;&gt;&gt; from sympy import*</span><br><span class="line">&gt;&gt;&gt; x &#x3D; symbols(&#39;x&#39;);</span><br><span class="line">&gt;&gt;&gt; integrate(x**3*ln(x))</span><br><span class="line">x**4*log(x)&#x2F;4 - x**4&#x2F;16</span><br></pre>
</li>
<li><p>写出函数在x=0的泰勒公式至所指的阶数：$ln\,cos\,x, (x^6)$</p>
<pre class="highlight"><span class="line">(D:\Anaconda3-5.2) C:\Users\lenovo&gt;python</span><br><span class="line">&gt;&gt;&gt; from sympy import*</span><br><span class="line">&gt;&gt;&gt; x &#x3D; symbols(&#39;x&#39;);</span><br><span class="line">&gt;&gt;&gt; (ln(cos(x))).series(x,0,8)</span><br><span class="line">-x**2&#x2F;2 - x**4&#x2F;12 - x**6&#x2F;45 + O(x**7)</span><br></pre>
</li>
</ol>
</li>
<li><p>使用python求解线性代数题目</p>
<ol>
<li>计算矩阵的乘积<br><img src="https://pic.rmb.bdstatic.com/bjh/9940eb0185104bc8f258cddb2ecf7d44.png" alt="image.png" title="image.png" srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="https://pic.rmb.bdstatic.com/bjh/9940eb0185104bc8f258cddb2ecf7d44.png" class="lozad post-image"><pre class="highlight"><span class="line">(D:\Anaconda3-5.2) C:\Users\lenovo&gt;python</span><br><span class="line">&gt;&gt;&gt; from numpy import*</span><br><span class="line">&gt;&gt;&gt; a &#x3D; matrix([[1,2],[3,4]])</span><br><span class="line">&gt;&gt;&gt; b &#x3D; matrix([[11,12],[13,14]])</span><br><span class="line">&gt;&gt;&gt; a.dot(b)</span><br><span class="line">matrix([[37, 40],</span><br><span class="line">    [85, 92]])</span><br></pre>
<ol>
<li>求矩阵A的逆矩阵<br><img src="https://pic.rmb.bdstatic.com/bjh/dafe17a7c0dd0347858e591bb1827813.png" alt="image.png" title="image.png" srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="https://pic.rmb.bdstatic.com/bjh/dafe17a7c0dd0347858e591bb1827813.png" class="lozad post-image"><pre class="highlight"><span class="line">(D:\Anaconda3-5.2) C:\Users\lenovo&gt;python</span><br><span class="line"> &gt;&gt;&gt; from numpy import*</span><br><span class="line"> &gt;&gt;&gt; c &#x3D; matrix([[1,1,1],[0,2,5],[2,5,-1]])</span><br><span class="line"> &gt;&gt;&gt; linalg.inv(c)</span><br><span class="line"> matrix([[ 1.28571429, -0.28571429, -0.14285714],</span><br><span class="line">     [-0.47619048,  0.14285714,  0.23809524],</span><br><span class="line">     [ 0.19047619,  0.14285714, -0.0952381 ]])</span><br></pre>
</li>
</ol>
</li>
</ol>
</li>
</ol>
<h2 id="实验感想"><a href="#实验感想" class="headerlink" title="实验感想"></a>实验感想</h2><ol>
<li>对解释型语言有了进一步的了解</li>
<li>初步掌握使用python求解数学问题</li>
</ol>
]]></content>
      <categories>
        <category>homework</category>
      </categories>
  </entry>
  <entry>
    <title>大数据技术下新媒体用户画像与隐私安全</title>
    <url>/2020/11/22/h9-1/</url>
    <content><![CDATA[<h1 id="大数据技术下新媒体用户画像与隐私安全"><a href="#大数据技术下新媒体用户画像与隐私安全" class="headerlink" title="大数据技术下新媒体用户画像与隐私安全"></a>大数据技术下新媒体用户画像与隐私安全</h1><p><img src="https://pic.rmb.bdstatic.com/bjh/e50ba1844836e1d2c011112239852801.png" alt="image.png" srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="https://pic.rmb.bdstatic.com/bjh/e50ba1844836e1d2c011112239852801.png" class="lozad post-image"></p>
<p>随着大数据时代的到来，各种用途的APP如雨后春笋般出现。例如用于外卖的美团、饿了么；用于社交通讯的QQ、微信；用于拍摄小视频的快手、抖音；用于购物的拼多多、淘宝……与此同时，用户画像的应用也越来越广泛，人们在感叹APP越来越懂用户的同时，也产生了担忧：大数据时代，各类APP在刻画用户画像的同时，用户的隐私安全如何得到保障？</p>
<h2 id="什么是用户画像"><a href="#什么是用户画像" class="headerlink" title="什么是用户画像"></a>什么是用户画像</h2><p><img src="https://pic.rmb.bdstatic.com/bjh/31bd5a3ba1c932bf2101717f2c23be64.png" alt="image.png" srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="https://pic.rmb.bdstatic.com/bjh/31bd5a3ba1c932bf2101717f2c23be64.png" class="lozad post-image"><br>简单来说，可以把用户画像理解为给用户贴标签。在新媒体时代，用户使用各种APP和社交媒体必然会遗留痕迹，而大数据就是将这些信息收集起来，然后对用户的年龄、社会属性、消费习惯、生活习惯等各个维度的信息进行分析、统计刻画出用户的画像。</p>
<h2 id="通过用户画像精准推送营销信息"><a href="#通过用户画像精准推送营销信息" class="headerlink" title="通过用户画像精准推送营销信息"></a>通过用户画像精准推送营销信息</h2><p>在大数据算法对不同用户进行了用户画像之后，在得知了用户真正的需求之后，各类 APP 就可以给用户精准提供用户所需商品。   </p>
<p>用户在浏览淘宝时，对于自己喜爱的商品会加购或收藏，这些行为甚至在同一页面停留时间的长短都会成为用户画像构建的数据。当一位女性用户长期搜索婴儿用品时，大数据算法就可以推算出这位用户是一位母亲，并且需要的产品类型是婴儿用品。     </p>
<p>抖音会根据用户观看视频的时长、类型、关注的人等数据对用户进行画像，以此完成个人专属推荐。比如有的用户喜欢看宠物视频，那么他在刷视频的过程中就会刷到很多关于宠物的视频推荐；而有的用户喜欢影视类视频，那这个用户就会被贴上“影视”的标签，所推荐的作品也会偏向于影视。    </p>
<p>在 QQ、微博等社交平台上，用户经常会发现“可能认识的好友”这一标签，平台通过对用户关注、用户评论、用户点赞、共同好友等数据的收集，形成一个巨大的数据池，系统会通过智能推算出用户关系网，形成关系群，给用户的社交关系进行画像，然后进行智能化社交推荐。</p>
<h2 id="用户画像数据获取带来的隐私安全问题"><a href="#用户画像数据获取带来的隐私安全问题" class="headerlink" title="用户画像数据获取带来的隐私安全问题"></a>用户画像数据获取带来的隐私安全问题</h2><p><img src="https://pic.rmb.bdstatic.com/bjh/17eced223431569de9d7a1893835a582.png" alt="image.png" srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="https://pic.rmb.bdstatic.com/bjh/17eced223431569de9d7a1893835a582.png" class="lozad post-image"><br>个人对自身信息的保护意识淡薄，是导致个人信息发生泄露重要原因之一。在很多情况下，人们会将自己个人信息共享给别人。比如在包括社交网站和电商购物平台在内的很多服务软件上注册会员时都需提供个人信息，在商家小利的优惠条件下，人们会愿意把自己的信息分享给别人。   </p>
<p>部分商业公司在巨大的利益驱动下，不顾法律红线，开始从事贩卖个人信息的活动。这部分公司已经掌握了数据搜集技术，在未征得当事人许可的情况下就擅自对包含用户个人信息的数据进行搜集。并把这些搜集到的个人信息，进行分析、归类，然后转卖给诈骗团伙、广告运营商、中介公司等团体或个人，从而实现非法获利。    </p>
<p>微信就曾因进行精准的广告投放，而被指控监控用户文字聊天数据，尽管微信已回应所有数据均已脱敏，但是仍然不能消除用户在使用时的担忧。除了腾讯，因为隐私泄露而被质疑的 APP 也不在少数。从阿里飞猪、携程、滴滴等一系列“大数据杀熟”行为，到美团、饿了么的“偷听门”风波，再到Facebook 大量用户信息泄露，这些 APP 似乎都被质疑“窥探用户隐私”。</p>
<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>大数据技术已经到达一个相对成熟的阶段，而作为大数据技术根基的用户画像，不管是对企业的长远发展，还是对用户个性化服务的提供都具有十分重要的意义，但是用户画像在给人们生活带来遍历的同时也带来了隐私安全问题，这是互联网发展必须解决的问题。</p>
<h5 id="参考文献："><a href="#参考文献：" class="headerlink" title="参考文献："></a>参考文献：</h5><p>[1]董莉莉.剖析大数据时代下用户画像及媒介策略[J]传媒,2016（2）：82-83.<br>[2]徐 乐.数据时代隐私安全问题研究[D].成都理工大学，2016.6.<br>[3]贾江洚,梁广洪.大数据时代下计算机网络信息安全问题探讨[J].计算机产品与流通,2019(11):52.</p>
]]></content>
      <categories>
        <category>homework</category>
      </categories>
  </entry>
  <entry>
    <title>字符游戏-贪吃蛇</title>
    <url>/2020/12/03/h8-1/</url>
    <content><![CDATA[<h1 id="实验目的"><a href="#实验目的" class="headerlink" title="实验目的"></a>实验目的</h1><ul>
<li>了解字符游戏的表示</li>
<li>体验自顶向下的设计方法实现问题求解</li>
<li>使用伪代码表示算法</li>
<li>使用函数抽象过程</li>
</ul>
<h1 id="实验内容"><a href="#实验内容" class="headerlink" title="实验内容"></a>实验内容</h1><ul>
<li>定义良好的头文件，设程序更加易于阅读和维护。</li>
<li>代码需要满足Google c/c++ style</li>
<li>程序总体结构必须严格符合以下伪代码框架<pre class="line-numbers language-none"><code class="language-none">输出字符矩阵
WHILE not 游戏结束 DO
	ch＝等待输入
	CASE ch DO
	‘A’:左前进一步，break 
	‘D’:右前进一步，break    
	‘W’:上前进一步，break    
	‘S’:下前进一步，break    
	END CASE
	输出字符矩阵
END WHILE
输出 Game Over!!! <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
</li>
</ul>
<h1 id="实验设计"><a href="#实验设计" class="headerlink" title="实验设计"></a>实验设计</h1><ul>
<li>在代码首给出完整的宏定义</li>
<li>逐步实现函数<pre class="line-numbers language-none"><code class="language-none">snakeMove, 用于控制贪吃蛇的移动和吞食
put_money, 用于在地图随机放置事物
judgeGameRun, 判断游戏是否继续
output, 打印游戏字符
gameover, 输出gameover
operation 用于接受用户输入并反馈<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
<li>最终实现代码如下所示：<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;time.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token expression">SNAKE_MAX_LENGTH <span class="token number">20</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token expression">SNAKE_HEAD </span><span class="token string">'H'</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token expression">SNAKE_BODY </span><span class="token string">'X'</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token expression">BLANK_CELL </span><span class="token string">' '</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token expression">SNAKE_FOOD </span><span class="token string">'$'</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token expression">WALL_CELL </span><span class="token string">'*'</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token expression"><span class="token function">NEXT_PLACE</span> <span class="token punctuation">(</span>map<span class="token punctuation">[</span>snakePlace<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> addY<span class="token punctuation">]</span><span class="token punctuation">[</span>snakePlace<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> addX<span class="token punctuation">]</span><span class="token punctuation">)</span> </span><span class="token comment">//The character in the next position</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token expression"><span class="token function">PLACE</span><span class="token punctuation">(</span>X<span class="token punctuation">)</span> <span class="token punctuation">(</span>map<span class="token punctuation">[</span>snakePlace<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>X<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>snakePlace<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>X<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                 </span><span class="token comment">//The character in the current position</span></span>

<span class="token keyword">char</span> map<span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
    <span class="token string">"************"</span><span class="token punctuation">,</span>
    <span class="token string">"*XXXXH     *"</span><span class="token punctuation">,</span>
    <span class="token string">"*          *"</span><span class="token punctuation">,</span>
    <span class="token string">"*          *"</span><span class="token punctuation">,</span>
    <span class="token string">"*          *"</span><span class="token punctuation">,</span>
    <span class="token string">"*          *"</span><span class="token punctuation">,</span>
    <span class="token string">"*          *"</span><span class="token punctuation">,</span>
    <span class="token string">"*          *"</span><span class="token punctuation">,</span>
    <span class="token string">"*          *"</span><span class="token punctuation">,</span>
    <span class="token string">"*          *"</span><span class="token punctuation">,</span>
    <span class="token string">"*          *"</span><span class="token punctuation">,</span>
    <span class="token string">"************"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token comment">//position and length of the snake</span>
<span class="token keyword">int</span> snakePlace<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>SNAKE_MAX_LENGTH<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> snakeLength <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>

<span class="token comment">//snake stepping: dy = -1(up), 1(down); dx = -1(left), 1(right), 0(no move); isfood = 1(eat), 0(nothing)</span>
<span class="token keyword">void</span> <span class="token function">snakeMove</span><span class="token punctuation">(</span><span class="token keyword">int</span> addX<span class="token punctuation">,</span> <span class="token keyword">int</span> addY<span class="token punctuation">,</span> <span class="token keyword">int</span> isFood<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//put a food randomized on a blank cell</span>
<span class="token keyword">void</span> <span class="token function">put_money</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//determine whether to continue the game</span>
<span class="token keyword">int</span> <span class="token function">judgeGameRun</span><span class="token punctuation">(</span><span class="token keyword">int</span> addX<span class="token punctuation">,</span> <span class="token keyword">int</span> addY<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//output cells of the grid</span>
<span class="token keyword">void</span> <span class="token function">output</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//output when game over</span>
<span class="token keyword">void</span> <span class="token function">gameover</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//control whether to add length of the snake</span>
<span class="token keyword">void</span> <span class="token function">operation</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token function">put_money</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">output</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">operation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">gameover</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token function">snakeMove</span><span class="token punctuation">(</span><span class="token keyword">int</span> addX<span class="token punctuation">,</span> <span class="token keyword">int</span> addY<span class="token punctuation">,</span> <span class="token keyword">int</span> isFood<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> temp1<span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>isFood<span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span> <span class="token comment">//whether to eat</span>
        <span class="token function">PLACE</span><span class="token punctuation">(</span>snakeLength <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token string">' '</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">else</span>
    <span class="token punctuation">&#123;</span>
        snakeLength<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token comment">//Non head movement and coordinate change</span>
    <span class="token function">PLACE</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">=</span> SNAKE_BODY<span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>temp1 <span class="token operator">=</span> snakeLength <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> temp1 <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span> temp1<span class="token operator">--</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        snakePlace<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>temp1<span class="token punctuation">]</span> <span class="token operator">=</span> snakePlace<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>temp1 <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        snakePlace<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>temp1<span class="token punctuation">]</span> <span class="token operator">=</span> snakePlace<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>temp1 <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token comment">//head movement and coordinate change</span>
    snakePlace<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+=</span> addY<span class="token punctuation">;</span>
    snakePlace<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+=</span> addX<span class="token punctuation">;</span>
    <span class="token function">PLACE</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">=</span> SNAKE_HEAD<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token function">put_money</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> x<span class="token punctuation">,</span> y<span class="token punctuation">;</span>
    <span class="token keyword">do</span>
    <span class="token punctuation">&#123;</span>
        x <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">10.0</span> <span class="token operator">*</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span>RAND_MAX <span class="token operator">+</span> <span class="token number">1.0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        y <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">10.0</span> <span class="token operator">*</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span>RAND_MAX <span class="token operator">+</span> <span class="token number">1.0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>map<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">!=</span> BLANK_CELL<span class="token punctuation">)</span><span class="token punctuation">;</span>
    map<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> SNAKE_FOOD<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> <span class="token function">judgeGameRun</span><span class="token punctuation">(</span><span class="token keyword">int</span> addX<span class="token punctuation">,</span> <span class="token keyword">int</span> addY<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token comment">//failure condition</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>NEXT_PLACE <span class="token operator">==</span> WALL_CELL<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>NEXT_PLACE <span class="token operator">==</span> SNAKE_BODY<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"You fail!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token comment">//move and eat</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>NEXT_PLACE <span class="token operator">==</span> SNAKE_FOOD<span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token comment">//sucess condition</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>snakeLength <span class="token operator">>=</span> SNAKE_MAX_LENGTH<span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"The snake is full.\nYou win!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>

        <span class="token function">snakeMove</span><span class="token punctuation">(</span>addX<span class="token punctuation">,</span> addY<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">put_money</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">else</span>
    <span class="token punctuation">&#123;</span>
        <span class="token function">snakeMove</span><span class="token punctuation">(</span>addX<span class="token punctuation">,</span> addY<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token function">output</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"cls"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"--------------------Greedy Snake-------------------------\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> temp1<span class="token punctuation">,</span> temp2<span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>temp1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> temp1 <span class="token operator">&lt;</span> <span class="token number">12</span><span class="token punctuation">;</span> temp1<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span>temp2 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> temp2 <span class="token operator">&lt;</span> <span class="token number">12</span><span class="token punctuation">;</span> temp2<span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token punctuation">,</span> map<span class="token punctuation">[</span>temp1<span class="token punctuation">]</span><span class="token punctuation">[</span>temp2<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token function">gameover</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"--------------------GAME OVER-------------------------\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token function">operation</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token function">srand</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">char</span> op<span class="token punctuation">;</span>
    <span class="token keyword">int</span> addX<span class="token punctuation">,</span> addY<span class="token punctuation">;</span>
    addX <span class="token operator">=</span> addY <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token comment">//get the opration of the console</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Please input the operation(w a s d): "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>op<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">setbuf</span><span class="token punctuation">(</span><span class="token constant">stdin</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">switch</span> <span class="token punctuation">(</span>op<span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
        <span class="token keyword">case</span> <span class="token string">'a'</span><span class="token operator">:</span>
        <span class="token keyword">case</span> <span class="token string">'A'</span><span class="token operator">:</span>
            addX <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
            addY <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token string">'d'</span><span class="token operator">:</span>
        <span class="token keyword">case</span> <span class="token string">'D'</span><span class="token operator">:</span>
            addX <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
            addY <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token string">'w'</span><span class="token operator">:</span>
        <span class="token keyword">case</span> <span class="token string">'W'</span><span class="token operator">:</span>
            addX <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
            addY <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token string">'s'</span><span class="token operator">:</span>
        <span class="token keyword">case</span> <span class="token string">'S'</span><span class="token operator">:</span>
            addX <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
            addY <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">default</span><span class="token operator">:</span>
            addX <span class="token operator">=</span> addY <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>addX <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> addY <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
            <span class="token keyword">continue</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">judgeGameRun</span><span class="token punctuation">(</span>addX<span class="token punctuation">,</span> addY<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token function">output</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>
</ul>
]]></content>
      <categories>
        <category>homework</category>
      </categories>
  </entry>
  <entry>
    <title>字符游戏-智能蛇</title>
    <url>/2020/12/06/h10/</url>
    <content><![CDATA[<h2 id="实验目的"><a href="#实验目的" class="headerlink" title="实验目的"></a>实验目的</h2><ul>
<li>了解算法与“智能”的关系</li>
<li>通过算法赋予蛇智能</li>
<li>了解Linux IO设计的控制</li>
</ul>
<h2 id="实验环境"><a href="#实验环境" class="headerlink" title="实验环境"></a>实验环境</h2><ul>
<li>使用Linux18.07平台进行开发</li>
<li>编辑环境为Vim</li>
</ul>
<h2 id="实验内容"><a href="#实验内容" class="headerlink" title="实验内容"></a>实验内容</h2><ul>
<li>修改初始化字符矩阵，并在地图中设置一些障碍物</li>
<li>实现决定蛇行走走向的伪代码（如下图所示）</li>
</ul>
<pre class="line-numbers language-none"><code class="language-none">   &#x2F;&#x2F; Hx,Hy: 头的位置
   &#x2F;&#x2F; Fx,Fy：食物的位置
function whereGoNext(Hx,Hy,Fx,Fy) &#123;
&#x2F;&#x2F; 用数组movable[3]&#x3D;&#123;“a”,”d”,”w”,”s”&#125; 记录可走的方向
&#x2F;&#x2F; 用数组distance[3]&#x3D;&#123;0,0,0,0&#125; 记录离食物的距离
&#x2F;&#x2F; 分别计算蛇头周边四个位置到食物的距离。H头的位置，F食物位置
&#x2F;&#x2F;     例如：假设输入”a” 则distance[0] &#x3D; |Fx – (Hx-1)| + |Fy – Hy|
&#x2F;&#x2F;           如果 Hx-1，Hy 位置不是Blank，则 distance[0] &#x3D; 9999
&#x2F;&#x2F; 选择distance中存最小距离的下标p，注意最小距离不能是9999
&#x2F;&#x2F; 返回 movable[p]
&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<h2 id="实验设计"><a href="#实验设计" class="headerlink" title="实验设计"></a>实验设计</h2><p>根据智能蛇的程序框架实现C语言程序<br><pre class="line-numbers language-none"><code class="language-none">输出字符矩阵
WHILE not 游戏结束 DO
       wait(time)
	ch＝whereGoNext(Hx,Hy,Fx,Fy)
	CASE ch DO
	‘A’:左前进一步，break 
	‘D’:右前进一步，break    
	‘W’:上前进一步，break    
	‘S’:下前进一步，break    
	END CASE
	输出字符矩阵
END WHILE
输出 Game Over!!! <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>
<p>具体实现代码如下所示<br><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/time.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/types.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;termios.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;time.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;math.h></span></span>

<span class="token keyword">static</span> <span class="token keyword">struct</span> <span class="token class-name">termios</span> ori_attr<span class="token punctuation">,</span> cur_attr<span class="token punctuation">;</span>

<span class="token keyword">static</span> __inline 
<span class="token keyword">int</span> <span class="token function">tty_reset</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">tcsetattr</span><span class="token punctuation">(</span>STDIN_FILENO<span class="token punctuation">,</span> TCSANOW<span class="token punctuation">,</span> <span class="token operator">&amp;</span>ori_attr<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>
                <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>

        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>


<span class="token keyword">static</span> __inline
<span class="token keyword">int</span> <span class="token function">tty_set</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
        
        <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token function">tcgetattr</span><span class="token punctuation">(</span>STDIN_FILENO<span class="token punctuation">,</span> <span class="token operator">&amp;</span>ori_attr<span class="token punctuation">)</span> <span class="token punctuation">)</span>
                <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
        
        <span class="token function">memcpy</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>cur_attr<span class="token punctuation">,</span> <span class="token operator">&amp;</span>ori_attr<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>cur_attr<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
        cur_attr<span class="token punctuation">.</span>c_lflag <span class="token operator">&amp;=</span> <span class="token operator">~</span>ICANON<span class="token punctuation">;</span>
<span class="token comment">//        cur_attr.c_lflag |= ECHO;</span>
        cur_attr<span class="token punctuation">.</span>c_lflag <span class="token operator">&amp;=</span> <span class="token operator">~</span>ECHO<span class="token punctuation">;</span>
        cur_attr<span class="token punctuation">.</span>c_cc<span class="token punctuation">[</span>VMIN<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        cur_attr<span class="token punctuation">.</span>c_cc<span class="token punctuation">[</span>VTIME<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">tcsetattr</span><span class="token punctuation">(</span>STDIN_FILENO<span class="token punctuation">,</span> TCSANOW<span class="token punctuation">,</span> <span class="token operator">&amp;</span>cur_attr<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>
                <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>

        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">static</span> __inline
<span class="token keyword">int</span> <span class="token function">kbhit</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> 
<span class="token punctuation">&#123;</span>
                   
        fd_set rfds<span class="token punctuation">;</span>
        <span class="token keyword">struct</span> <span class="token class-name">timeval</span> tv<span class="token punctuation">;</span>
        <span class="token keyword">int</span> retval<span class="token punctuation">;</span>

        <span class="token comment">/* Watch stdin (fd 0) to see when it has input. */</span>
        <span class="token function">FD_ZERO</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>rfds<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">FD_SET</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>rfds<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">/* Wait up to five seconds. */</span>
        tv<span class="token punctuation">.</span>tv_sec  <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        tv<span class="token punctuation">.</span>tv_usec <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

        retval <span class="token operator">=</span> <span class="token function">select</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>rfds<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>tv<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">/* Don't rely on the value of tv now! */</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>retval <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"select()"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>retval<span class="token punctuation">)</span>
                <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token comment">/* FD_ISSET(0, &amp;rfds) will be true. */</span>
        <span class="token keyword">else</span>
                <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//将你的 snake 代码放在这里</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token expression">SNAKE_MAX_LENGTH <span class="token number">20</span></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token expression">SNAKE_HEAD </span><span class="token string">'H'</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token expression">SNAKE_BODY </span><span class="token string">'X'</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token expression">BLANK_CELL </span><span class="token string">' '</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token expression">SNAKE_FOOD </span><span class="token string">'$'</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token expression">WALL_CELL </span><span class="token string">'*'</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span>	<span class="token expression"><span class="token function">NEXT_PLACE</span> <span class="token punctuation">(</span>map<span class="token punctuation">[</span>snakePlace<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">+</span>addY<span class="token punctuation">]</span><span class="token punctuation">[</span>snakePlace<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">+</span>addX<span class="token punctuation">]</span><span class="token punctuation">)</span>	</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token expression"><span class="token function">PLACE</span><span class="token punctuation">(</span>X<span class="token punctuation">)</span> <span class="token punctuation">(</span>map<span class="token punctuation">[</span>snakePlace<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>X<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>snakePlace<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>X<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>			</span></span>

<span class="token keyword">char</span> map<span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
	<span class="token string">"************"</span><span class="token punctuation">,</span>
	<span class="token string">"*XXXXH     *"</span><span class="token punctuation">,</span>
	<span class="token string">"*          *"</span><span class="token punctuation">,</span>
	<span class="token string">"*          *"</span><span class="token punctuation">,</span>
	<span class="token string">"* **       *"</span><span class="token punctuation">,</span>
	<span class="token string">"*          *"</span><span class="token punctuation">,</span>
	<span class="token string">"*          *"</span><span class="token punctuation">,</span>
	<span class="token string">"*       ** *"</span><span class="token punctuation">,</span>
	<span class="token string">"*          *"</span><span class="token punctuation">,</span>
	<span class="token string">"*    **    *"</span><span class="token punctuation">,</span>
	<span class="token string">"*          *"</span><span class="token punctuation">,</span>
	<span class="token string">"************"</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> snakePlace<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>SNAKE_MAX_LENGTH<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> snakeLength <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> foodPlace<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">snakeMove</span><span class="token punctuation">(</span><span class="token keyword">int</span> addX<span class="token punctuation">,</span> <span class="token keyword">int</span> addY<span class="token punctuation">,</span> <span class="token keyword">int</span> isFood<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">int</span> temp1<span class="token punctuation">;</span>

	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>isFood<span class="token punctuation">)</span>
		<span class="token function">PLACE</span><span class="token punctuation">(</span>snakeLength <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token string">' '</span><span class="token punctuation">;</span>
	<span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
		snakeLength<span class="token operator">++</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token function">PLACE</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">=</span> SNAKE_BODY<span class="token punctuation">;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span>temp1 <span class="token operator">=</span> snakeLength <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>temp1 <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span>temp1<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		snakePlace<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>temp1<span class="token punctuation">]</span> <span class="token operator">=</span> snakePlace<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>temp1 <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
		snakePlace<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>temp1<span class="token punctuation">]</span> <span class="token operator">=</span> snakePlace<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>temp1 <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	snakePlace<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+=</span> addY<span class="token punctuation">;</span>
	snakePlace<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+=</span> addX<span class="token punctuation">;</span>
	<span class="token function">PLACE</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">=</span> SNAKE_HEAD<span class="token punctuation">;</span>

<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token function">put_money</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">int</span> x<span class="token punctuation">,</span> y<span class="token punctuation">;</span>
	<span class="token keyword">do</span> <span class="token punctuation">&#123;</span>
		x <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">10.0</span><span class="token operator">*</span><span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span>RAND_MAX <span class="token operator">+</span> <span class="token number">1.0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		y <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">10.0</span><span class="token operator">*</span><span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span>RAND_MAX <span class="token operator">+</span> <span class="token number">1.0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>map<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">!=</span> BLANK_CELL<span class="token punctuation">)</span><span class="token punctuation">;</span>
	map<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> SNAKE_FOOD<span class="token punctuation">;</span>
	foodPlace<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> y<span class="token punctuation">;</span>
	foodPlace<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> x<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>


<span class="token keyword">char</span> <span class="token function">whereGoNext</span><span class="token punctuation">(</span><span class="token keyword">int</span> Hx<span class="token punctuation">,</span><span class="token keyword">int</span> Hy<span class="token punctuation">,</span><span class="token keyword">int</span> Fx<span class="token punctuation">,</span><span class="token keyword">int</span> Fy<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token comment">// 用数组movable[3]=&#123;“a”,”d”,”w”,”s”&#125; 记录可走的方向</span>
	<span class="token keyword">char</span> movable<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'d'</span><span class="token punctuation">,</span><span class="token string">'w'</span><span class="token punctuation">,</span><span class="token string">'s'</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> distance<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
	<span class="token comment">// 用数组distance[3]=&#123;0,0,0,0&#125; 记录离食物的距离</span>
	<span class="token comment">// 分别计算蛇头周边四个位置到食物的距离。H头的位置，F食物位置</span>
	<span class="token comment">//     例如：假设输入”a” 则distance[0] = |Fx – (Hx-1)| + |Fy – Hy|</span>
	<span class="token comment">//           如果 Hx-1，Hy 位置不是Blank，则 distance[0] = 9999</span>
	<span class="token comment">// 选择distance中存最小距离的下标p，注意最小距离不能是9999</span>
	<span class="token keyword">int</span> minum <span class="token operator">=</span> <span class="token number">9999</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> p <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	distance<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">fabs</span><span class="token punctuation">(</span>Fx <span class="token operator">-</span> <span class="token punctuation">(</span>Hx<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">fabs</span><span class="token punctuation">(</span>Fy <span class="token operator">-</span> Hy<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span><span class="token punctuation">(</span>map<span class="token punctuation">[</span>Hy<span class="token punctuation">]</span><span class="token punctuation">[</span>Hx<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> WALL_CELL<span class="token operator">||</span>map<span class="token punctuation">[</span>Hy<span class="token punctuation">]</span><span class="token punctuation">[</span>Hx<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">==</span>SNAKE_BODY<span class="token punctuation">)</span>
		distance<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">9999</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span><span class="token punctuation">(</span>minum<span class="token operator">></span>distance<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
		minum <span class="token operator">=</span> distance<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
		p <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	distance<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">fabs</span><span class="token punctuation">(</span>Fx <span class="token operator">-</span> <span class="token punctuation">(</span>Hx<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">fabs</span><span class="token punctuation">(</span>Fy <span class="token operator">-</span> Hy<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span><span class="token punctuation">(</span>map<span class="token punctuation">[</span>Hy<span class="token punctuation">]</span><span class="token punctuation">[</span>Hx<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> WALL_CELL<span class="token operator">||</span>map<span class="token punctuation">[</span>Hy<span class="token punctuation">]</span><span class="token punctuation">[</span>Hx<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">==</span>SNAKE_BODY<span class="token punctuation">)</span>
		distance<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">9999</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span><span class="token punctuation">(</span>minum<span class="token operator">></span>distance<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
		minum <span class="token operator">=</span> distance<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
		p <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	distance<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">fabs</span><span class="token punctuation">(</span>Fx <span class="token operator">-</span> <span class="token punctuation">(</span>Hx<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">fabs</span><span class="token punctuation">(</span>Fy <span class="token operator">-</span> <span class="token punctuation">(</span>Hy<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span><span class="token punctuation">(</span>map<span class="token punctuation">[</span>Hy<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>Hx<span class="token punctuation">]</span> <span class="token operator">==</span> WALL_CELL<span class="token operator">||</span>map<span class="token punctuation">[</span>Hy<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>Hx<span class="token punctuation">]</span><span class="token operator">==</span>SNAKE_BODY<span class="token punctuation">)</span>
		distance<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">9999</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span><span class="token punctuation">(</span>minum<span class="token operator">></span>distance<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
		minum <span class="token operator">=</span> distance<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
		p <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	distance<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">fabs</span><span class="token punctuation">(</span>Fx <span class="token operator">-</span> <span class="token punctuation">(</span>Hx<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">fabs</span><span class="token punctuation">(</span>Fy <span class="token operator">-</span> <span class="token punctuation">(</span>Hy<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span><span class="token punctuation">(</span>map<span class="token punctuation">[</span>Hy<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>Hx<span class="token punctuation">]</span> <span class="token operator">==</span> WALL_CELL<span class="token operator">||</span>map<span class="token punctuation">[</span>Hy<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>Hx<span class="token punctuation">]</span><span class="token operator">==</span>SNAKE_BODY<span class="token punctuation">)</span>
		distance<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">9999</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span><span class="token punctuation">(</span>minum<span class="token operator">></span>distance<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
		minum <span class="token operator">=</span> distance<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
		 p <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">return</span> movable<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token comment">// 返回 movable[p]</span>
	<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> <span class="token function">judgeGameRun</span><span class="token punctuation">(</span><span class="token keyword">int</span> addX<span class="token punctuation">,</span> <span class="token keyword">int</span> addY<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>NEXT_PLACE <span class="token operator">==</span> WALL_CELL<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>NEXT_PLACE <span class="token operator">==</span> SNAKE_BODY<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"You fail!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">if</span> <span class="token punctuation">(</span>NEXT_PLACE <span class="token operator">==</span> SNAKE_FOOD<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>snakeLength <span class="token operator">>=</span> SNAKE_MAX_LENGTH<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"The snake is full.\nYou win!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>

		<span class="token function">snakeMove</span><span class="token punctuation">(</span>addX<span class="token punctuation">,</span> addY<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">put_money</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">else</span> 
		<span class="token function">snakeMove</span><span class="token punctuation">(</span>addX<span class="token punctuation">,</span> addY<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token function">output</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"clear"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//linux</span>
	<span class="token comment">//system("cls");//windos</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"------------------------Snake-------------------------\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> temp1<span class="token punctuation">,</span> temp2<span class="token punctuation">;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span>temp1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>temp1 <span class="token operator">&lt;</span> <span class="token number">12</span><span class="token punctuation">;</span>temp1<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">for</span> <span class="token punctuation">(</span>temp2 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>temp2 <span class="token operator">&lt;</span> <span class="token number">12</span><span class="token punctuation">;</span>temp2<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token punctuation">,</span> map<span class="token punctuation">[</span>temp1<span class="token punctuation">]</span><span class="token punctuation">[</span>temp2<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token function">gameover</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Game Over\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token function">operation</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token function">srand</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">char</span> op<span class="token punctuation">;</span>
	<span class="token keyword">int</span> addX<span class="token punctuation">,</span> addY<span class="token punctuation">;</span>
	addX <span class="token operator">=</span> addY <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

	<span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token comment">//printf("Please input the operation(WASD/wasd): ");</span>
		<span class="token comment">//do&#123;</span>
			<span class="token comment">//op = getchar();</span>
		<span class="token comment">//&#125;while(op=='\n');</span>
		<span class="token comment">//setbuf(stdin, NULL);</span>
		<span class="token comment">//fflush(stdin);</span>
		<span class="token keyword">long</span> t<span class="token operator">=</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		     
	        <span class="token keyword">while</span><span class="token punctuation">(</span>t<span class="token operator">==</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
			<span class="token punctuation">;</span><span class="token comment">//等待1秒</span>
		op <span class="token operator">=</span> <span class="token function">whereGoNext</span><span class="token punctuation">(</span>snakePlace<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>snakePlace<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>foodPlace<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>foodPlace<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">switch</span> <span class="token punctuation">(</span>op<span class="token punctuation">)</span>
		<span class="token punctuation">&#123;</span>
		<span class="token keyword">case</span> <span class="token string">'a'</span><span class="token operator">:</span>
		<span class="token keyword">case</span> <span class="token string">'A'</span><span class="token operator">:</span>
			addX <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
			addY <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
			<span class="token keyword">break</span><span class="token punctuation">;</span>
		<span class="token keyword">case</span> <span class="token string">'d'</span><span class="token operator">:</span>
		<span class="token keyword">case</span> <span class="token string">'D'</span><span class="token operator">:</span>
			addX <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
			addY <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
			<span class="token keyword">break</span><span class="token punctuation">;</span>
		<span class="token keyword">case</span> <span class="token string">'w'</span><span class="token operator">:</span>
		<span class="token keyword">case</span> <span class="token string">'W'</span><span class="token operator">:</span>
			addX <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
			addY <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
			<span class="token keyword">break</span><span class="token punctuation">;</span>
		<span class="token keyword">case</span> <span class="token string">'s'</span><span class="token operator">:</span>
		<span class="token keyword">case</span> <span class="token string">'S'</span><span class="token operator">:</span>
			addX <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
			addY <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
			<span class="token keyword">break</span><span class="token punctuation">;</span>
		<span class="token keyword">default</span><span class="token operator">:</span>
			addX <span class="token operator">=</span> addY <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
			<span class="token keyword">break</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>addX <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> addY <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
			<span class="token keyword">continue</span><span class="token punctuation">;</span>

		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">judgeGameRun</span><span class="token punctuation">(</span>addX<span class="token punctuation">,</span> addY<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			<span class="token keyword">break</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
		<span class="token function">output</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>



<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
        <span class="token comment">//设置终端进入非缓冲状态</span>
        <span class="token keyword">int</span> tty_set_flag<span class="token punctuation">;</span>
        tty_set_flag <span class="token operator">=</span> <span class="token function">tty_set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//将你的 snake 代码放在这里</span>
	<span class="token function">put_money</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">output</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">operation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">gameover</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"pressed `q` to quit!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

                <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token function">kbhit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                        <span class="token keyword">const</span> <span class="token keyword">int</span> key <span class="token operator">=</span> <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c pressed\n"</span><span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token keyword">if</span><span class="token punctuation">(</span>key <span class="token operator">==</span> <span class="token string">'q'</span><span class="token punctuation">)</span>
                                <span class="token keyword">break</span><span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
                       <span class="token punctuation">;</span><span class="token comment">// fprintf(stderr, "&lt;no key detected>\n");</span>
                <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>

        <span class="token comment">//恢复终端设置</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>tty_set_flag <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> 
                <span class="token function">tty_reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>


<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>
<p>运行结果部分截图<br><img src="https://pic.rmb.bdstatic.com/bjh/e78d930383770cf0ee96fa46fc069546.png" width="50%" srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="https://pic.rmb.bdstatic.com/bjh/e78d930383770cf0ee96fa46fc069546.png" class="lozad post-image"><br><img src="https://pic.rmb.bdstatic.com/bjh/d978eb8850622991246ddc19b4663889.png" width="50%" srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="https://pic.rmb.bdstatic.com/bjh/d978eb8850622991246ddc19b4663889.png" class="lozad post-image"><br><img src="https://pic.rmb.bdstatic.com/bjh/d0b614c3dda77d767d215a79a3be6bcb.png" width="50%" srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="https://pic.rmb.bdstatic.com/bjh/d0b614c3dda77d767d215a79a3be6bcb.png" class="lozad post-image"></p>
]]></content>
      <categories>
        <category>homework</category>
      </categories>
  </entry>
  <entry>
    <title>互联网时代的热点领域与营销方法</title>
    <url>/2021/01/06/h11/</url>
    <content><![CDATA[<h1 id="热点领域"><a href="#热点领域" class="headerlink" title="热点领域"></a>热点领域</h1><h2 id="5G"><a href="#5G" class="headerlink" title="5G"></a>5G</h2><p><img src="https://ss0.bdstatic.com/70cFvHSh_Q1YnxGkpoWK1HF6hhy/it/u=1012801975,905508611&amp;fm=26&amp;gp=0.jpg" alt srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="https://ss0.bdstatic.com/70cFvHSh_Q1YnxGkpoWK1HF6hhy/it/u=1012801975,905508611&amp;fm=26&amp;gp=0.jpg" class="lozad post-image"><br><a href="https://bk.tw.lvfukeji.com/wiki/5G#%E6%8A%80%E8%A1%93%E5%89%B5%E6%96%B0">5G</a> 第五代移动通信技术（英语：5th generation mobile networks或5th generation wireless systems，简称5G）是最新一代移动通信技术，为4G（LTE-A、WiMAX-A）系统后的延伸。</p>
<p>5G与4G相比，具有“更高网速、低延时高可靠、低功率海量连接”的特点。</p>
<p>在超高速率方面，5G速率最高可以达到4G的100倍，实现10Gb/秒的峰值速率，能够用手机很流畅地看4K、8K高清视频，急速畅玩360度全景VR游戏等等。</p>
<p>在超低时延方面，5G的空口时延可以低到1毫秒，仅相当于4G的十分之一，远高于人体的应激反应，可以广泛地应用于自动控制领域。</p>
<p>在超大连接方面，5G每平方公里可以有100万的连接数，与4G相比用户容量可以大大增加，除了手机终端的连接之外，还可以广泛地应用于物联网。<a href="https://zhuanlan.zhihu.com/p/60587008?utm_source=wechat_session">[1]</a></p>
<p>5G时代，华为在技术和产品等多个维度实现全面领先，5G商用合同订单居首位且超半数位于欧洲市场。全球ICT行业权威咨询公司GlobalData发布的《5G接入网（RAN）竞争力分析报告》指出：前五大设备商中，华为在5GRAN（无线接入网）竞争力综合排名中位列第一，而其他设备商各有优劣，并列处于第二梯队。华为在基带容量、射频产品组合、部署简易度及技术演进能力这四个运营商看重的关键维度中均保持第一。</p>
<h2 id="云计算"><a href="#云计算" class="headerlink" title="云计算"></a>云计算</h2><p><img src="https://pic1.zhimg.com/80/v2-08489d1ae5a6db47efbeabcea1962ac9_720w.jpg?source=1940ef5c" alt srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="https://pic1.zhimg.com/80/v2-08489d1ae5a6db47efbeabcea1962ac9_720w.jpg?source=1940ef5c" class="lozad post-image"><br><a href="https://bk.tw.lvfukeji.com/baike-%E9%9B%B2%E7%AB%AF%E9%81%8B%E7%AE%97">云计算</a>（英语：cloud computing），也被意译为网络计算，是一种基于互联网的计算方式，通过这种方式，共享的软硬件资源和信息可以按需求提供给计算机各种终端和其他设备，使用服务商提供的电脑基建作计算和资源。</p>
<p>“云”一般具有相当的规模，一些知名的云供应商如Google云计算、Amazon、IBM、微软、阿里等也都拥能拥有上百万级的服务器规模。而依靠这些分布式的服务器所构建起来的“云”能够为使用者提供前所未有的计算能力。</p>
<p>网络安全已经成为所有企业或个人创业者必须面对的问题，企业的IT团队或个人很难应对那些来自网络的恶意攻击，而使用云服务则可以借助更专业的安全团队来有效降低安全风险。</p>
<h2 id="人工智能AI"><a href="#人工智能AI" class="headerlink" title="人工智能AI"></a>人工智能AI</h2><p><img src="https://ss3.bdstatic.com/70cFv8Sh_Q1YnxGkpoWK1HF6hhy/it/u=1695025592,1319555803&amp;fm=26&amp;gp=0.jpg" alt srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="https://ss3.bdstatic.com/70cFv8Sh_Q1YnxGkpoWK1HF6hhy/it/u=1695025592,1319555803&amp;fm=26&amp;gp=0.jpg" class="lozad post-image"><br><a href="https://bk.tw.lvfukeji.com/wiki/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD">人工智能</a>（英语：artificial intelligence，缩写为AI）亦称智械、机器智能，指由人制造出来的机器所表现出来的智能。通常人工智能是指通过普通计算机程序来呈现人类智能的技术。</p>
<p>人工智能历经三次发展浪潮：萌芽期、推理期，突破期、知识期，飞速发展期、机器学习期。目前，深度学习语音、图像识别领域大获成功。人工智能的迅速发展将深刻改变人类社会和世界的面貌，当前，不少国家已将人工智能上升为国家重大发展战略。</p>
<p>近年来中国人工智能产业发展迅速。从市场规模来看，自2015年开始，中国人工智能市场规模逐年攀升。截至2017年中国人工智能市场规模已达到了217亿元，同比增长52.8%。据预测，到2020年，中国在人工智能的市场规模将达到710亿元。2015到2020年间复合年均增长率为44.5%。<a href="https://www.bilibili.com/read/cv6709719">[3]</a></p>
<h2 id="物联网"><a href="#物联网" class="headerlink" title="物联网"></a>物联网</h2><p><img src="https://ss1.bdstatic.com/70cFuXSh_Q1YnxGkpoWK1HF6hhy/it/u=1609532872,1801895935&amp;fm=26&amp;gp=0.jpg" alt srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="https://ss1.bdstatic.com/70cFuXSh_Q1YnxGkpoWK1HF6hhy/it/u=1609532872,1801895935&amp;fm=26&amp;gp=0.jpg" class="lozad post-image"><br><a href="https://bk.tw.lvfukeji.com/wiki/%E7%89%A9%E8%81%94%E7%BD%91">物联网</a>（英语：Internet of Things，简称IoT）是一种计算设备、机械、数字机器相互关系的系统，具备通用唯一识别码（UID），并具有通过网络传输数据的能力，无需人与人、或是人与设备的交互。</p>
<p>近年以来，随着互联网产业发展日趋成熟，产业链及基础生态环境相当完善，市场容量已趋饱和，物联网作为下一个风口，成为众多设备制造商、网络供应商、系统集成商看好的突破方向。十二五之后，国家对中国制造产业升级提出明确的改革口号，为整个行业得到国家的政策支持提供了有力保障。</p>
<p>全球都将物联网视为信息技术的第三次浪潮，确立未来信息社会竞争优势的关键。据美国独立市场研究机构Forrester预测，物联网所带来的产业价值要比互联网高30倍，到2020年，中国物联网产业将经历应用创新、技术创新、服务创新三个关键的发展阶段，成长为一个超过五万亿规模的巨大市场。<a href="https://blog.csdn.net/duozhishidai/article/details/89043817">[4]</a></p>
<h1 id="营销方式"><a href="#营销方式" class="headerlink" title="营销方式"></a>营销方式</h1><h2 id="病毒营销"><a href="#病毒营销" class="headerlink" title="病毒营销"></a>病毒营销</h2><p><a href="https://baike.baidu.com/item/%E7%97%85%E6%AF%92%E8%90%A5%E9%94%80/190640?fr=aladdin">病毒营销</a>（Viral Marketing，又称病毒式营销、病毒性营销 、基因营销或核爆式营销），是利用公众的积极性和人际网络，让营销信息像病毒一样传播和扩散，营销信息被快速复制传向数以万计、数以百万计的观众，它能够像病毒一样深入人脑，快速复制，迅速传播，将信息短时间内传向更多的受众。病毒营销是一种常见的网络营销方法，常用于进行网站推广、品牌推广等。</p>
<p>大家了解的拼多多，就是忠实的病毒营销玩家，通过各种丰富的活动内容，促进用户进行分享裂变，实现有效传播。<br><img src="https://pic.rmb.bdstatic.com/bjh/4766df6e851e9cbb0ca66efbf79126eb.png" alt="image.png" srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="https://pic.rmb.bdstatic.com/bjh/4766df6e851e9cbb0ca66efbf79126eb.png" class="lozad post-image"></p>
<h2 id="饥饿营销"><a href="#饥饿营销" class="headerlink" title="饥饿营销"></a>饥饿营销</h2><p><a href="https://baike.baidu.com/item/%E9%A5%A5%E9%A5%BF%E8%90%A5%E9%94%80">饥饿营销</a>，运用于商品或服务的商业推广，是指商品提供者有意调低产量，以期达到调控供求关系、制造供不应求“假象”、以维护产品形象并维持商品较高售价和利润率的营销策略。</p>
<p>当然，这种方法要适度，用得好可以使品牌形象得到提升，用得不好会引起用户的反感。比如咱们都知道小米手机，一度就曾饥饿营销过度。<br><img src="https://pic.rmb.bdstatic.com/bjh/a9483dd5ab75c08bff7eb58eb97d111b.png" alt="image.png" srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="https://pic.rmb.bdstatic.com/bjh/a9483dd5ab75c08bff7eb58eb97d111b.png" class="lozad post-image"></p>
<h2 id="借势营销"><a href="#借势营销" class="headerlink" title="借势营销"></a>借势营销</h2><p><a href="https://baike.baidu.com/item/%E5%80%9F%E5%8A%BF%E8%90%A5%E9%94%80">借势营销</a>，是将销售的目的隐藏于营销活动之中，将产品的推广融入到一个消费者喜闻乐见的环境里，使消费者在这个环境中了解产品并接受产品的营销手段。</p>
<p>具体表现为通过媒体争夺消费者眼球、借助消费者自身的传播力、依靠轻松娱乐的方式等潜移默化地引导市场消费。换言之，便是通过顺势、造势、借势等方式，以求提高企业或产品的知名度、美誉度，树立良好的品牌形象，并最终促成产品或服务销售的营销策略。</p>
<p>但对于中国多如牛毛的企业来说，能很好的运用借势营销手段的人少之又少。很多企业在运用借势营销时，总是浪费资源、耗费精力而毫无所获。<br><img src="https://pic.rmb.bdstatic.com/bjh/e0f7495fae85a039f64ed09ba741d0e7.png" alt="image.png" srcset="data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E" data-src="https://pic.rmb.bdstatic.com/bjh/e0f7495fae85a039f64ed09ba741d0e7.png" class="lozad post-image"></p>
<h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>以上便是对互联网时代的热点领域和营销方法的简要介绍，感谢您的浏览</p>
]]></content>
      <categories>
        <category>homework</category>
      </categories>
  </entry>
  <entry>
    <title>打印日历的C语言实现</title>
    <url>/2021/03/10/calendar/</url>
    <content><![CDATA[<h2 id="打印日历的C语言实现"><a href="#打印日历的C语言实现" class="headerlink" title="打印日历的C语言实现"></a>打印日历的C语言实现</h2><p>实现nextDate函数，通过调用nextDate函数来打印出2021年的日历</p>
<font color = orange>
int nextDate(int month, int date, int year)
</font>  

<p>要求打印出指定日期的下一天，即给出某年某月某日，需返回下一天是多少号。<br>具体代码如下：</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//***********************************************</span>
<span class="token comment">//*** a program to print the calendar of 2021 ***</span>
<span class="token comment">//***********************************************</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>

<span class="token comment">//this is a function to return the next date of the given day</span>
<span class="token keyword">int</span> <span class="token function">nextDate</span><span class="token punctuation">(</span><span class="token keyword">int</span> month<span class="token punctuation">,</span> <span class="token keyword">int</span> date<span class="token punctuation">,</span> <span class="token keyword">int</span> year<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>

    <span class="token comment">//use two arrays to store the days of leap year and common year</span>
    <span class="token keyword">int</span> leap_days<span class="token punctuation">[</span><span class="token number">13</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">,</span> <span class="token number">29</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">,</span> 
    <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> common_days<span class="token punctuation">[</span><span class="token number">13</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">,</span> 
    <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

    <span class="token comment">//at first, decide wether it is a leap year</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>year <span class="token operator">%</span> <span class="token number">4</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> year <span class="token operator">%</span> <span class="token number">100</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>year <span class="token operator">%</span> <span class="token number">400</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>date <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">></span> leap_days<span class="token punctuation">[</span>month<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token comment">//if month is December, </span>
    <span class="token comment">//it means next day is the first day of new year</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>month <span class="token operator">==</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
                year<span class="token operator">++</span><span class="token punctuation">;</span> month<span class="token operator">++</span><span class="token punctuation">;</span> date <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span><span class="token punctuation">&#123;</span>
                date<span class="token operator">++</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span><span class="token punctuation">&#123;</span>
            date<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>date <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">></span> common_days<span class="token punctuation">[</span>month<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>month <span class="token operator">==</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
                year<span class="token operator">++</span><span class="token punctuation">;</span> month<span class="token operator">++</span><span class="token punctuation">;</span> date <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span><span class="token punctuation">&#123;</span>
                date<span class="token operator">++</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span><span class="token punctuation">&#123;</span>
            date<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> date<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>


<span class="token comment">//this is a function to print the calendar of 2021</span>
<span class="token keyword">void</span> <span class="token function">printCalendar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n***********************************\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"* WELCOME TO THE CALENDAR OF 2021 *\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"***********************************\n\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//the number of each month</span>
    <span class="token keyword">int</span> days<span class="token punctuation">[</span><span class="token number">13</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">,</span> 
    <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  
    <span class="token comment">//pointers of months'name</span>
    <span class="token keyword">char</span><span class="token operator">*</span> months<span class="token punctuation">[</span><span class="token number">13</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"fault"</span><span class="token punctuation">,</span> <span class="token string">"January"</span><span class="token punctuation">,</span> <span class="token string">"February"</span><span class="token punctuation">,</span> 
    <span class="token string">"March"</span><span class="token punctuation">,</span> <span class="token string">"April"</span><span class="token punctuation">,</span> <span class="token string">"May"</span><span class="token punctuation">,</span> <span class="token string">"June"</span><span class="token punctuation">,</span> <span class="token string">"July"</span><span class="token punctuation">,</span> <span class="token string">"August"</span><span class="token punctuation">,</span>
    <span class="token string">"September"</span><span class="token punctuation">,</span> <span class="token string">"October"</span><span class="token punctuation">,</span> <span class="token string">"November"</span><span class="token punctuation">,</span> <span class="token string">"December"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">12</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"***** %s *****\n"</span><span class="token punctuation">,</span> months<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Sun Mon Tue Wed Tus Fri Sat\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">static</span> <span class="token keyword">int</span> blanks <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>   
        <span class="token comment">//a variable to count the number of the blanks </span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> blanks<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"    "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>

        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> days<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            blanks<span class="token operator">++</span><span class="token punctuation">;</span> 

            <span class="token keyword">if</span><span class="token punctuation">(</span>j <span class="token operator">&lt;</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d   "</span><span class="token punctuation">,</span> <span class="token function">nextDate</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> <span class="token number">2021</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
                <span class="token comment">//print blanks to aline</span>
            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span><span class="token punctuation">&#123;</span>
                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d  "</span><span class="token punctuation">,</span> <span class="token function">nextDate</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> <span class="token number">2021</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
            <span class="token comment">//this block is to decide whether to reprint the week</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>blanks <span class="token operator">==</span> <span class="token number">7</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                blanks <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token function">printCalendar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      <categories>
        <category>problems</category>
      </categories>
  </entry>
  <entry>
    <title>使用DFS枚举格雷码</title>
    <url>/2021/03/23/dfs/</url>
    <content><![CDATA[<h2 id="使用DFS枚举格雷码"><a href="#使用DFS枚举格雷码" class="headerlink" title="使用DFS枚举格雷码"></a>使用DFS枚举格雷码</h2><p><font color = red>问题</font>：给定正整数$n$，需要输出$2^n$个$n$位01串，且相邻01串之间只允许有一位不相同。<br>$n=2$时的结果：00，01，11，10<br>$n=3$时的结果：000，001，011，010，110，111，101，100    </p>
<p><font color = red>思路</font>：由题目描述，可以联想到格雷码，相邻字符串只有1位不同。等长01串，使用二叉树结构储存，通过特定的排列，使得根节点到叶子节点的路径上刚好是所需要的01串,最后通过对二叉树遍历，输出所有可能的结果。每次遍历都需要从根节点到叶子节点，同时记录路径上的01值，可以使用DFS(深度优先搜索)进行遍历。</p>
<p><font color = red>算法</font>:<br><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token comment">/*input函数用来控制输入信息，防止输入违法数值*/</span>
<span class="token keyword">int</span> <span class="token function">input</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">*</span>n <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"illegal input!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span> 
    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">/*创建储存特定序列的满二叉树*/</span>
<span class="token keyword">void</span> <span class="token function">tree_create</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> size<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>size <span class="token operator">>=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>size <span class="token operator">>=</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        a<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token comment">/*当树的层数大于等于3时，树的左右节点呈对称排列*/</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>i<span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">4</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>i<span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">4</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>i<span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">4</span> <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>i<span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">4</span> <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">/*打印大小为size的数组到屏幕上*/</span>
<span class="token keyword">int</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> size<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">/*使用DFS算法，对二叉树进行遍历，并用path数组记录路径*/</span>
<span class="token keyword">void</span> <span class="token function">gray_create</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> cur_place<span class="token punctuation">,</span> <span class="token keyword">int</span> cur_len<span class="token punctuation">,</span> <span class="token keyword">int</span> len<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span> path<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    path<span class="token punctuation">[</span>cur_len<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>cur_place<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>cur_len <span class="token operator">==</span> len<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">/*当现处的层数等于树叶所在的层数时，输出01串*/</span>
        <span class="token function">print</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> len<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token function">gray_create</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token punctuation">(</span>cur_place<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> cur_len<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> len<span class="token punctuation">,</span> path<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">gray_create</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token punctuation">(</span>cur_place<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">,</span> cur_len<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> len<span class="token punctuation">,</span> path<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">/*创建01串 */</span>
<span class="token keyword">void</span> <span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">input</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token operator">*</span>n<span class="token punctuation">;</span>
        <span class="token keyword">int</span> size <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token operator">*</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> a<span class="token punctuation">[</span>size<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> path<span class="token punctuation">[</span>len<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

        <span class="token function">tree_create</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">gray_create</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">,</span> path<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>


<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> n<span class="token punctuation">;</span>
    <span class="token function">create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>
<p><font color = red>结果</font>：</p>
<p><img src="https://pic.rmb.bdstatic.com/bjh/d81012d5b3a1410aa29632ef960dee3d.png" alt="image.png" srcset="/img/loading.gif" data-src="https://pic.rmb.bdstatic.com/bjh/d81012d5b3a1410aa29632ef960dee3d.png" class="lozad post-image"></p>
]]></content>
      <categories>
        <category>problems</category>
      </categories>
  </entry>
</search>
